{
  "openapi": "3.0.3",
  "info": {
    "title": "API ezMESURE",
    "version": "v1",
    "description": "Use this API to interact with [ezMESURE](https://ezmesure.couperin.org).",
    "license": {
      "name": "CeCILL 2.1",
      "url": "http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html"
    },
    "contact": {
      "email": "ezteam@couperin.org",
      "name": "ezTeam"
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "Current server"
    },
    {
      "url": "https://ezmesure.couperin.org/api",
      "description": "Production server"
    },
    {
      "url": "https://ezmesure-preprod.couperin.org/api",
      "description": "Staging server for testing"
    }
  ],
  "tags": [
    {
      "name": "Administration"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Basics"
    },
    {
      "name": "Files"
    },
    {
      "name": "Harvests"
    },
    {
      "name": "Indices"
    },
    {
      "name": "Institutions"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Kibana"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Repositories"
    },
    {
      "name": "Sushi"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "Users"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Action is forbidden for the authenticated user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ConflictError": {
        "description": "Action is conflicted with the current state of the resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "MemberRole": {
        "type": "string",
        "enum": [
          "doc_contact",
          "tech_contact",
          "guest"
        ]
      },
      "MemberPermissions": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "institution:read",
            "institution:write",
            "memberships:read",
            "memberships:write",
            "sushi:read",
            "sushi:write",
            "sushi:delete",
            "reporting:read",
            "reporting:write"
          ]
        }
      },
      "ItemID": {
        "type": "string",
        "format": "cuid",
        "example": "cjld2cyuq0000t3rmniod1foy",
        "description": "ID of the item",
        "readOnly": true
      },
      "ItemUpdateDate": {
        "type": "string",
        "format": "date-time",
        "example": "2020-11-05T17:07:31.967Z",
        "description": "Last modification of the item",
        "readOnly": true
      },
      "ItemCreationDate": {
        "type": "string",
        "format": "date-time",
        "example": "2020-11-05T17:07:31.967Z",
        "description": "Creation date of the item",
        "readOnly": true
      },
      "Institution": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "parentInstitutionId": {
            "type": "string",
            "description": "Parent institution identifier",
            "example": "cjld2cyuq0000t3rmniod1foy",
            "format": "cuid"
          },
          "parentInstitution": {
            "description": "Parent institution",
            "$ref": "#/components/schemas/Institution",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Institution name",
            "example": "University of Foobar"
          },
          "validated": {
            "type": "boolean",
            "description": "True when the institution has been validated",
            "default": false
          },
          "hidePartner": {
            "type": "boolean",
            "description": "Whether to hide the institution in the partner list",
            "default": false
          },
          "tags": {
            "description": "Tags associated to the institution",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logoId": {
            "description": "Identifier of the institution logo image",
            "example": "32a1c269738c43463312f09821b22323.png",
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "description": "Institution type",
            "example": "Enseignement supérieur",
            "type": [
              "string",
              "null"
            ]
          },
          "acronym": {
            "description": "Institution acronym",
            "example": "UFO",
            "type": [
              "string",
              "null"
            ]
          },
          "websiteUrl": {
            "description": "URL of the institution website",
            "example": "http://univ-foobar.fr",
            "format": "uri",
            "type": [
              "string",
              "null"
            ]
          },
          "city": {
            "description": "City of the institution",
            "example": "Paris",
            "type": [
              "string",
              "null"
            ]
          },
          "uai": {
            "example": "0362917P",
            "description": "UAI (Unité Administrative Immatriculée) of the institution",
            "type": [
              "string",
              "null"
            ]
          },
          "social": {
            "description": "Social links of the institution",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "twitterUrl": {
                "type": "string"
              },
              "linkedinUrl": {
                "type": "string"
              },
              "youtubeUrl": {
                "type": "string"
              },
              "facebookUrl": {
                "type": "string"
              }
            }
          },
          "sushiReadySince": {
            "type": [
              "string",
              "null"
            ],
            "description": "Date since which SUSHI credentials are ready",
            "format": "date-time"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Membership"
            }
          },
          "spaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Space"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "sushiCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SushiCredentials"
            }
          },
          "childInstitutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Institution"
            }
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Repository"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "fullName",
          "email"
        ],
        "properties": {
          "username": {
            "description": "Username",
            "type": "string",
            "example": "john.doo",
            "readOnly": true
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "fullName": {
            "description": "User full name",
            "type": "string",
            "example": "John Doo"
          },
          "email": {
            "description": "User email",
            "type": "string",
            "example": "doo.john@ezpaarse.org"
          },
          "isAdmin": {
            "description": "Whether the user has admin permissions",
            "type": "boolean",
            "default": false
          },
          "metadata": {
            "description": "Metadata properties associated to the user",
            "type": "object",
            "nullable": true
          },
          "memberships": {
            "description": "User memberships",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Membership"
            }
          },
          "actions": {
            "description": "Actions triggered by this user",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        }
      },
      "Membership": {
        "description": "Represent a membership between a user and an institution",
        "type": "object",
        "properties": {
          "user": {
            "description": "The user that belongs to the institution",
            "$ref": "#/components/schemas/User",
            "readOnly": true
          },
          "institution": {
            "description": "The institution that user is member of",
            "$ref": "#/components/schemas/Institution",
            "readOnly": true
          },
          "roles": {
            "description": "A list of user roles in the institution",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberRole"
            }
          },
          "permissions": {
            "description": "A list of user permissions associated to the institution",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberPermissions"
            }
          },
          "spacePermissions": {
            "description": "Space permissions of the member",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpacePermission"
            }
          },
          "repositoryPermissions": {
            "description": "Repository permissions of the member",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryPermission"
            }
          },
          "locked": {
            "description": "Whether the member can be modified or not",
            "type": "boolean"
          }
        }
      },
      "Space": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-z0-9][a-z0-9_.-]*$",
            "example": "ezpaarse",
            "description": "ID of the space. The institution namespace is used as a prefix when the actual Kibana space is created."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "institution": {
            "description": "The institution associated to this space",
            "allOf": [
              {
                "$ref": "#/components/schemas/Institution"
              },
              {
                "readOnly": true
              }
            ]
          },
          "institutionId": {
            "description": "ID of the institution associated to this space",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemID"
              },
              {
                "readOnly": false
              }
            ]
          },
          "type": {
            "description": "Space type",
            "example": "counter5",
            "type": "string"
          },
          "name": {
            "description": "Space name",
            "type": "string"
          },
          "description": {
            "description": "Space description",
            "type": "string"
          },
          "initials": {
            "description": "Space initials",
            "example": "EZ",
            "type": "string"
          },
          "color": {
            "description": "Space color",
            "example": "#458df9",
            "type": "string"
          },
          "permissions": {
            "description": "List of permissions associated to this space",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SpacePermission"
            }
          }
        }
      },
      "SpacePermission": {
        "description": "Represent access permissions of a user to a specific space",
        "type": "object",
        "properties": {
          "user": {
            "description": "The user associated to this permission",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "readOnly": true
              }
            ]
          },
          "space": {
            "description": "The space associated to this permission",
            "allOf": [
              {
                "$ref": "#/components/schemas/Space"
              },
              {
                "readOnly": true
              }
            ]
          },
          "readonly": {
            "description": "Whether the user has read of read/write access to the space",
            "type": "boolean"
          },
          "locked": {
            "description": "Whether the permission can be modified by admins only",
            "type": "boolean",
            "default": false
          }
        }
      },
      "Repository": {
        "description": "Represent a section of ElasticSearch indices",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "institution": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Institution",
                "nullable": true
              }
            ]
          },
          "pattern": {
            "type": "string"
          },
          "institutionId": {
            "$ref": "#/components/schemas/ItemID"
          },
          "type": {
            "type": "string"
          },
          "permissions": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryPermission"
            }
          }
        }
      },
      "RepositoryPermission": {
        "description": "Represent permissions of a user for a repository",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User",
            "readOnly": true
          },
          "repository": {
            "$ref": "#/components/schemas/Repository",
            "readOnly": true
          },
          "permissions": {
            "description": "User permissions for the repository",
            "type": "string",
            "enum": [
              "read",
              "read_write"
            ]
          },
          "locked": {
            "description": "Whether the permission can be modified by admins only",
            "type": "boolean",
            "default": false
          }
        }
      },
      "Action": {
        "description": "Represent an activity associated to an institution",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "institutionId": {
            "description": "ID of the institution concerned by the action",
            "$ref": "#/components/schemas/ItemID"
          },
          "institution": {
            "description": "The institution concerned by the action",
            "$ref": "#/components/schemas/Institution"
          },
          "authorId": {
            "description": "Username of the user that triggered the action",
            "type": "string"
          },
          "author": {
            "description": "The user that triggered the action",
            "$ref": "#/components/schemas/User"
          },
          "date": {
            "description": "When the action occurred",
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "type": {
            "description": "The action type",
            "example": "commentInstitution",
            "type": "string"
          },
          "data": {
            "description": "Arbitrary data associated with the action (comment message, old/new state...)",
            "type": "object"
          }
        }
      },
      "HarvestJob": {
        "description": "Represent the actual execution of a SUSHI harvest",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "status": {
            "description": "Status of the job",
            "type": "string",
            "readOnly": true,
            "enum": [
              "waiting",
              "running",
              "delayed",
              "finished",
              "failed",
              "cancelled",
              "interrupted"
            ]
          },
          "runningTime": {
            "description": "Running time of the job in milliseconds",
            "type": "integer",
            "readOnly": true
          },
          "reportType": {
            "description": "The report type that should be harvested",
            "type": "string",
            "example": "TR"
          },
          "harvestId": {
            "description": "Arbitrary identifier, used to group jobs from a same harvest batch",
            "type": "string"
          },
          "index": {
            "description": "Target index where report will be inserted",
            "type": "string"
          },
          "errorCode": {
            "description": "The error code, if a fatal exception was encountered",
            "type": "string",
            "readOnly": true
          },
          "result": {
            "description": "Result of the job",
            "readOnly": true,
            "type": [
              "number",
              "string",
              "boolean",
              "object",
              "array",
              "null"
            ]
          },
          "logs": {
            "description": "Job logs",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          "steps": {
            "description": "Steps of the job",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          }
        }
      },
      "HarvestSession": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "beginDate": {
            "description": "Begin date of the period to be harvested",
            "type": "string",
            "format": "date",
            "pattern": "yyyy-MM"
          },
          "endDate": {
            "description": "End date of the period to be harvested",
            "type": "string",
            "format": "date",
            "pattern": "yyyy-MM"
          },
          "credentialsQuery": {
            "type": "object",
            "description": "Query used to get credentials to harvest",
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemID"
                }
              },
              "institutionIds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemID"
                }
              },
              "endpointIds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemID"
                }
              }
            }
          },
          "reportTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowFaulty": {
            "type": "boolean",
            "default": false,
            "description": "Allow faulty endpoints to be harvested"
          },
          "timeout": {
            "type": "number",
            "default": 600,
            "description": "Maximum job duration in seconds"
          },
          "forceDownload": {
            "type": "boolean",
            "default": false,
            "description": "Whether to download the report even if a local copy exists"
          },
          "ignoreValidation": {
            "type": "boolean",
            "default": null,
            "format": "nullable",
            "description": "Try to import the report even if validation fails"
          },
          "params": {
            "type": "object",
            "default": {},
            "description": "Additional job parameters"
          },
          "startedAt": {
            "type": "string",
            "default": null,
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "First start of the session",
            "readOnly": true
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "_count": {
            "type": "object",
            "properties": {
              "jobs": {
                "type": "integer"
              }
            }
          }
        }
      },
      "HarvestSessionStatus": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the session active ?"
          },
          "runningTime": {
            "type": "integer",
            "description": "Running time in milliseconds"
          },
          "_count": {
            "credentials": {
              "type": "object",
              "properties": {
                "all": {
                  "type": "integer",
                  "description": "Count of requested credentials"
                },
                "harvestable": {
                  "type": "integer",
                  "description": "Count of credentials that will be harvested"
                }
              }
            },
            "jobStatuses": {
              "type": "object",
              "description": "Count of jobs with a given status",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        }
      },
      "Harvest": {
        "description": "Represent the harvest state for a period and a set of credentials",
        "type": "object",
        "properties": {
          "harvestedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "The date of the harvest",
            "readOnly": true
          },
          "credentialsId": {
            "$ref": "#/components/schemas/ItemID"
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SushiCredentials"
            }
          },
          "status": {
            "description": "Status of the harvest (which is the same as the associated harvest job)",
            "type": "string",
            "readOnly": true,
            "enum": [
              "waiting",
              "running",
              "delayed",
              "finished",
              "failed",
              "cancelled",
              "interrupted"
            ]
          },
          "period": {
            "description": "The requested period",
            "type": "string",
            "format": "date",
            "pattern": "yyyy-MM",
            "readOnly": true
          },
          "reportId": {
            "description": "The requested report ID",
            "type": "string",
            "example": "TR",
            "readOnly": true
          },
          "errorCode": {
            "description": "The error code, if a fatal exception was encountered",
            "type": "string",
            "readOnly": true
          },
          "sushiExceptions": {
            "description": "The SUSHI exceptions returned by the endpoint",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "description": "The exception code",
                  "type": "string",
                  "example": "3030"
                },
                "severity": {
                  "description": "The exception severity",
                  "type": "string",
                  "enum": [
                    "info",
                    "warning",
                    "error"
                  ]
                },
                "message": {
                  "description": "The exception message",
                  "type": "string"
                }
              }
            }
          },
          "insertedItems": {
            "description": "Number of report items that were successfuly inserted into Elasticsearch",
            "type": "integer",
            "readOnly": true
          },
          "updatedItems": {
            "description": "Number of report items that were updated in Elasticsearch",
            "type": "integer",
            "readOnly": true
          },
          "failedItems": {
            "description": "Number of report items that failed to be inserted into Elasticsearch",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "SushiException": {
        "description": "A SUSHI exception",
        "type": "object",
        "properties": {
          "Code": {
            "type": "integer"
          },
          "Severity": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "Help_URL": {
            "type": "string"
          }
        }
      },
      "Log": {
        "description": "A log message",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "job": {
            "$ref": "#/components/schemas/HarvestJob"
          },
          "date": {
            "description": "The date of the message",
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "description": "The message level",
            "type": "string",
            "enum": [
              "error",
              "warn",
              "info",
              "verbose",
              "debug"
            ]
          },
          "message": {
            "description": "The content of the message",
            "type": "string"
          }
        }
      },
      "Step": {
        "description": "Represents a step in a processing job",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "job": {
            "description": "The job associated to this step",
            "$ref": "#/components/schemas/HarvestJob"
          },
          "startedAt": {
            "description": "Time when the step has started processing",
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "description": "Step label",
            "type": "string"
          },
          "status": {
            "description": "Step status",
            "type": "string",
            "enum": [
              "pending",
              "running",
              "finished",
              "failed"
            ]
          },
          "runningTime": {
            "description": "Running time of the step in milliseconds",
            "type": "integer"
          },
          "data": {
            "description": "Arbitrary data associated to the step",
            "type": [
              "number",
              "string",
              "boolean",
              "object",
              "array",
              "null"
            ]
          }
        }
      },
      "SushiEndpoint": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "sushiUrl": {
            "description": "URL of the Sushi endpoint",
            "example": "https://journals.com/rest/COUNTER/v5",
            "type": "string"
          },
          "vendor": {
            "type": "string",
            "minLength": 1,
            "example": "Akademiai Kiado",
            "description": "Vendor name"
          },
          "description": {
            "description": "Description of the SUSHI endpoint",
            "type": [
              "string",
              "null"
            ]
          },
          "counterVersion": {
            "description": "The COUNTER version supported by the endpoint",
            "type": [
              "string",
              "null"
            ],
            "example": "5.0.1",
            "pattern": "^[0-9]+(\\.[0-9]+(\\.[0-9]+)?)?$"
          },
          "technicalProvider": {
            "description": "The technical provider that operates the SUSHI endpoint",
            "type": [
              "string",
              "null"
            ]
          },
          "ignoreReportValidation": {
            "description": "Whether to ignore the validation of the harvested reports",
            "type": "boolean",
            "default": false
          },
          "requireCustomerId": {
            "description": "Whether the endpoint requires a customer ID",
            "type": "boolean",
            "default": false
          },
          "requireRequestorId": {
            "description": "Whether the endpoint requires a requestor ID",
            "type": "boolean",
            "default": false
          },
          "requireApiKey": {
            "description": "Whether the endpoint requires a API key",
            "type": "boolean",
            "default": false
          },
          "defaultCustomerId": {
            "description": "Default customer ID to use",
            "type": [
              "string",
              "null"
            ]
          },
          "defaultRequestorId": {
            "description": "Default requestor ID to use",
            "type": [
              "string",
              "null"
            ]
          },
          "defaultApiKey": {
            "description": "Default API key to use",
            "type": [
              "string",
              "null"
            ]
          },
          "paramSeparator": {
            "description": "Separator to be use for multivaluated SUSHI parameters (defaults to '|')",
            "type": [
              "string",
              "null"
            ]
          },
          "testedReport": {
            "description": "Report used when testing endpoint",
            "type": [
              "string",
              "null"
            ]
          },
          "tags": {
            "description": "Tags associated with the endpoint",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credentials": {
            "description": "SUSHI credentials associated with this endpoint",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SushiCredentials"
            }
          },
          "params": {
            "description": "List of default parameters associated with this endpoint",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SushiParameter"
            }
          }
        }
      },
      "SushiCredentials": {
        "description": "A set of credentials for a given SUSHI endpoint",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ItemID"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ItemCreationDate"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/ItemUpdateDate"
          },
          "institution": {
            "description": "The institution that owns the credentials",
            "$ref": "#/components/schemas/Institution"
          },
          "endpoint": {
            "description": "The SUSHI endpoint associated with the credentials",
            "$ref": "#/components/schemas/SushiEndpoint"
          },
          "customerId": {
            "description": "Customer ID to be used for the endpoint",
            "type": "string"
          },
          "requestorId": {
            "description": "Requestor ID to be used for the endpoint",
            "type": "string"
          },
          "apiKey": {
            "description": "API key to be used for the endpoint",
            "type": "string"
          },
          "comment": {
            "description": "Arbitrary comment about the credentials",
            "type": "string"
          },
          "tags": {
            "description": "Arbitrary list of tags associated to the credentials",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "params": {
            "description": "SUSHI parameters that should be added when requesting the endpoint",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SushiParameter"
            }
          },
          "connection": {
            "type": "object",
            "description": "State of the latest connection test",
            "readOnly": true,
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the connection. Success if the harvest test succeeded, or if exceptions are not related to authentication. Unauthorized if the credentials are invalid. Failed if an error occurred.",
                "enum": ["success", "unauthorized", "failed"],
                "readOnly": true
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of the latest connection test",
                "readOnly": true
              },
              "exceptions": {
                "type": "array",
                "description": "Exceptions that was thrown by the latest connection test",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/SushiException"
                }
              },
              "errorCode": {
                "description": "The error code, if an exception was encountered",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "harvestJobs": {
            "description": "Harvest jobs associated with the credentials",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HarvestJob"
            }
          },
          "harvests": {
            "description": "Harvest requests associated with the credentials",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Harvest"
            }
          }
        }
      },
      "SushiParameter": {
        "description": "A SUSHI request parameter",
        "type": "object",
        "properties": {
          "name": {
            "description": "The parameter name",
            "type": "string"
          },
          "value": {
            "description": "The parameter value",
            "type": "string"
          },
          "scope": {
            "description": "The parameter scope",
            "type": "string",
            "enum": [
              "all",
              "report_list",
              "report_download",
              "report_download_tr",
              "report_download_pr",
              "report_download_dr",
              "report_download_ir"
            ]
          }
        }
      },
      "SyncStatus": {
        "type": "object",
        "properties": {
          "startedAt": {
            "description": "Start date of the synchronization",
            "type": "string",
            "format": "date-time"
          },
          "runningTime": {
            "description": "Running time of the synchronization, in milliseconds",
            "type": "integer"
          },
          "status": {
            "description": "Status of the synchonization process",
            "type":"string",
            "enum": ["idle", "synchronizing", "completed"]
          },
          "hasErrors": {
            "description": "Whether errors occurred during the synchronization",
            "type": "boolean"
          },
          "result": {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "object",
                "properties": {
                  "errors": { "type": "integer" },
                  "synchronized": { "type": "integer" }
                }
              },
              "repositories": {
                "type": "object",
                "properties": {
                  "errors": { "type": "integer" },
                  "synchronized": { "type": "integer" }
                }
              },
              "users": {
                "type": "object",
                "properties": {
                  "errors": { "type": "integer" },
                  "synchronized": { "type": "integer" }
                }
              },
              "ezreeportUsers": {
                "type": "object",
                "properties": {
                  "errors": { "type": "integer" },
                  "synchronized": { "type": "integer" }
                }
              },
              "ezreeportNamespaces": {
                "type": "object",
                "properties": {
                  "errors": { "type": "integer" },
                  "synchronized": { "type": "integer" }
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Authentication Error",
            "description": "The error message",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "minimum": 100,
            "exclusiveMaximum": 600,
            "readOnly": true
          }
        }
      },
      "IndexList": {
        "type": "object",
        "properties": {
          "_shards": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "successful": {
                "type": "integer"
              },
              "failed": {
                "type": "integer"
              }
            }
          },
          "_all": {
            "type": "object",
            "properties": {
              "primaries": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "deleted": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "total": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "deleted": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "indices": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "primaries": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "total": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IndexInsert": {
        "type": "object",
        "properties": {
          "took": {
            "type": "integer",
            "description": "Response time in ms"
          },
          "total": {
            "type": "integer",
            "description": "Total number of consultations received"
          },
          "inserted": {
            "type": "integer",
            "description": "Number of inserted consultations"
          },
          "updated": {
            "type": "integer",
            "description": "Number of updated consultations"
          },
          "failed": {
            "type": "integer",
            "description": "Number of consultations that failed to be inserted"
          },
          "errors": {
            "type": "array",
            "description": "First error messages from consultations that failed to be inserted",
            "items": {
              "type": "string",
              "example": "log_id is missing"
            }
          }
        }
      },
      "IndexRemove": {
        "type": "object",
        "properties": {
          "took": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "deleted": {
            "type": "integer"
          },
          "batches": {
            "type": "integer"
          },
          "timed_out": {
            "type": "boolean"
          },
          "version_conflicts": {
            "type": "integer"
          },
          "noops": {
            "type": "integer"
          },
          "throttled_millis": {
            "type": "integer"
          },
          "requests_per_second": {
            "type": "integer"
          },
          "throttled_until_millis": {
            "type": "integer"
          },
          "retries": {
            "type": "object",
            "properties": {
              "bulk": {
                "type": "integer"
              },
              "search": {
                "type": "integer"
              }
            }
          },
          "failures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Metrics": {
        "type": "object",
        "x-examples": {},
        "properties": {
          "took": {
            "type": "integer",
            "example": 280,
            "description": "response time in ms"
          },
          "docs": {
            "type": "integer",
            "example": 1000,
            "description": "total number of documents"
          },
          "dateCoverage": {
            "type": "object",
            "properties": {
              "min": {
                "type": "integer",
                "description": "minimum date covered by the documents"
              },
              "max": {
                "type": "integer",
                "description": "maximum date covered by the documents"
              }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "days": {
                "type": "integer",
                "description": "number of days covered by all documents"
              },
              "titles": {
                "type": "integer",
                "description": "number of different publication titles"
              },
              "platforms": {
                "type": "integer",
                "description": "number of different platforms"
              },
              "indices": {
                "type": "integer",
                "description": "number of indices"
              }
            }
          }
        }
      },
      "FileList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "ezproxy.2020.07.01.ec.csv",
              "description": "File name"
            },
            "size": {
              "type": "integer",
              "example": 1342632,
              "description": "File size in bytes"
            },
            "createdAt": {
              "type": "string",
              "example": "2020-11-05T16:15:27.929Z",
              "format": "date-time",
              "description": "File creation date"
            },
            "lastModified": {
              "type": "string",
              "example": "2020-11-05T16:15:27.929Z",
              "format": "date-time",
              "description": "File modification date"
            }
          }
        }
      },
      "Sushi": {
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "645c4000-1f89-11eb-836f-a3005ccf2dc6",
            "description": "ID of the sushi item",
            "readOnly": true
          },
          "vendor": {
            "type": "string",
            "minLength": 1,
            "example": "Akademiai Kiado",
            "description": "Vendor name"
          },
          "requestorId": {
            "type": "string",
            "description": "Requestor ID"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID"
          },
          "apiKey": {
            "type": "string",
            "description": "API key"
          },
          "comment": {
            "type": "string",
            "description": "Arbitrary comment"
          },
          "package": {
            "type": "string",
            "description": "ezMESURE package ID"
          },
          "institutionId": {
            "type": "string",
            "example": "f438c3f0-152b-11eb-8113-ff14fcf1fe5b",
            "format": "uuid",
            "description": "ID of the institution that owns the sushi item"
          },
          "endpointId": {
            "type": "string",
            "example": "f438c3f0-152b-11eb-8113-ff14fcf1fe5b",
            "format": "uuid",
            "description": "ID of the associated SUSHI endpoint"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "Last modification of the sushi item",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "Creation date of the sushi item",
            "readOnly": true
          },
          "connection": {
            "type": "object",
            "description": "State of the latest connection test",
            "readOnly": true,
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Whether the latest connection test succeeded"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of the latest connection test"
              },
              "exceptions": {
                "type": "array",
                "description": "Exceptions that was thrown by the latest connection test",
                "items": {
                  "$ref": "#/components/schemas/SushiException"
                }
              },
              "errorCode": {
                "description": "The error code, if a fatal exception was encountered",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "params": {
            "type": "object",
            "description": "Parameters that should be added in the query string",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the query parameter"
              },
              "value": {
                "type": "string",
                "description": "Value of the query parameter"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "id",
          "package",
          "institutionId",
          "endpointId",
          "updatedAt",
          "createdAt"
        ]
      },
      "IndexPattern": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KibanaSavedObject"
          },
          {
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/IndexPatternAttributes"
              }
            }
          }
        ],
        "description": "A Kibana index pattern"
      },
      "IndexPatternAttributes": {
        "title": "IndexPatternAttributes",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "timeFieldName": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "KibanaSavedObject": {
        "title": "KibanaSavedObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/KibanaSavedObjectError"
          },
          "attributes": {
            "type": "object"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KibanaSavedObjectReference"
            }
          },
          "migrationVersion": {
            "type": "object"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "originId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "references",
          "migrationVersion"
        ],
        "description": ""
      },
      "KibanaSavedObjectReference": {
        "title": "KibanaSavedObjectReference",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "KibanaSavedObjectError": {
        "title": "KibanaSavedObjectError",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "KibanaDashboardImportResponse": {
        "title": "KibanaDashboardImportResponse",
        "type": "object",
        "description": "",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KibanaSavedObject"
            }
          }
        },
        "required": [
          "objects"
        ]
      },
      "KibanaDashboardExportResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "pattern": "^[\\d.]+$"
          },
          "objects": {
            "$ref": "#/components/schemas/KibanaSavedObject"
          }
        },
        "required": [
          "version",
          "objects"
        ]
      },
      "KibanaRole": {
        "description": "",
        "type": "object",
        "x-examples": {
          "example-1": {
            "metadata": {
              "version": 1
            },
            "elasticsearch": {
              "cluster": [],
              "indices": []
            },
            "kibana": [
              {
                "base": [],
                "feature": {
                  "discover": [
                    "all"
                  ],
                  "visualize": [
                    "all"
                  ],
                  "dashboard": [
                    "all"
                  ],
                  "dev_tools": [
                    "read"
                  ],
                  "advancedSettings": [
                    "read"
                  ],
                  "indexPatterns": [
                    "read"
                  ]
                },
                "spaces": [
                  "*"
                ]
              }
            ]
          }
        },
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated to the role"
          },
          "elasticsearch": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "run_as": {
                "type": "array",
                "description": "A list of usernames the owners of this role can impersonate",
                "items": {
                  "type": "string"
                }
              },
              "cluster": {
                "type": "array",
                "description": "A list of cluster privileges",
                "items": {
                  "type": "string"
                }
              },
              "indices": {
                "type": "array",
                "description": "A list of indices permissions entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "names": {
                      "type": "array",
                      "description": "A list of indices to which the permissions in this entry apply",
                      "items": {
                        "type": "string"
                      }
                    },
                    "privileges": {
                      "type": "array",
                      "description": "The index level privileges the owners of the role have",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "kibana": {
            "type": "array",
            "uniqueItems": false,
            "description": "Objects that specify the Kibana privileges for the role",
            "items": {
              "type": "object",
              "properties": {
                "spaces": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "base": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "feature": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "kibana"
        ]
      },
      "ElasticsearchIndex": {
        "title": "ElasticsearchIndex",
        "type": "object",
        "description": "",
        "properties": {
          "aliases": {
            "type": "object",
            "readOnly": true
          },
          "mappings": {
            "type": "object",
            "readOnly": true
          },
          "settings": {
            "type": "object",
            "readOnly": true
          }
        }
      },
      "Queue": {
        "description": "Status of a job queue",
        "type": "object",
        "x-examples": {
          "example-1": {
            "id": "sushi",
            "jobCounts": 123,
            "completedCount": 123,
            "failedCount": 123,
            "delayedCount": 123,
            "activeCount": 123,
            "waitingCount": 123,
            "pausedCount": 123
          }
        },
        "title": "Queue",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "ID of the queue",
            "example": "harvest"
          },
          "paused": {
            "type": "boolean",
            "description": "Whether the queue is currently paused"
          },
          "jobCounts": {
            "type": "object",
            "required": [
              "waiting",
              "active",
              "completed",
              "failed",
              "delayed",
              "paused"
            ],
            "properties": {
              "waiting": {
                "type": "number",
                "description": "Number of waiting jobs"
              },
              "active": {
                "type": "number",
                "description": "Number of active jobs"
              },
              "completed": {
                "type": "number",
                "description": "Number of completed jobs"
              },
              "failed": {
                "type": "number",
                "description": "Number of failed jobs"
              },
              "delayed": {
                "type": "number",
                "description": "Number of delayed jobs"
              },
              "paused": {
                "type": "number",
                "description": "Number of paused jobs"
              }
            }
          }
        },
        "required": [
          "id",
          "paused",
          "jobCounts"
        ]
      },
      "File": {
        "title": "File",
        "x-stoplight": {
          "id": "sgs0cpyla8792"
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "File name"
          },
          "type": {
            "type": "string",
            "enum": [
              "directory",
              "file"
            ],
            "description": "File type"
          },
          "size": {
            "type": "integer",
            "description": "File size in Bytes"
          },
          "mtime": {
            "type": "string",
            "description": "Last modification date"
          },
          "children": {
            "$ref": "#/components/schemas/File"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "description": "Link to the file"
          }
        },
        "required": [
          "name",
          "type",
          "size",
          "mtime"
        ],
        "x-examples": {
          "example-1": {
            "name": "string",
            "type": "directory",
            "size": 0,
            "mtime": "string",
            "children": {
              "name": "string",
              "type": "directory",
              "size": 0,
              "mtime": "string",
              "children": {},
              "href": "http://example.com"
            },
            "href": "http://example.com"
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Ping the API",
        "description": "This route is currently only used to send a ping to the API.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                },
                "examples": {
                  "example-1": {
                    "value": "OK"
                  }
                }
              }
            }
          }
        },
        "operationId": "ping",
        "tags": [
          "Basics"
        ]
      }
    },
    "/dashboards": {
      "get": {
        "summary": "List dashboards",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KibanaSavedObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-dashboards",
        "description": "List dashboards",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "space",
            "description": "Get dashboards with a specific space ID"
          }
        ]
      }
    },
    "/dashboards/_copy": {
      "post": {
        "summary": "Copy a dashboard from one space to another",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KibanaDashboardImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "post-dashboards-_copy",
        "description": "Copy a dashboard from one space to another",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "object",
                    "properties": {
                      "space": {
                        "type": "string",
                        "description": "ID of the source space"
                      },
                      "dashboard": {
                        "type": "array",
                        "description": "ID of one or more source dashboards",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "dashboard"
                    ]
                  },
                  "target": {
                    "type": "object",
                    "properties": {
                      "space": {
                        "type": "string",
                        "description": "ID of the space where the dashboard should be imported"
                      },
                      "indexPattern": {
                        "type": "string",
                        "description": "An index pattern to use instead of the one included in the imported objects"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "force",
            "description": "Override existing objects"
          }
        ]
      }
    },
    "/dashboards/_export": {
      "get": {
        "summary": "Export a dashboard",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KibanaDashboardExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "operationId": "get-dashboards-_export",
        "description": "Export a dashboard",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "space",
            "description": "ID of the space where the dashboard is located"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "dashboard",
            "description": "ID of one or more dashboards to be exported",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/dashboards/_import": {
      "post": {
        "summary": "Import a dashboard",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KibanaDashboardImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "post-dashboards-_import",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Import a dashboard into a given space",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KibanaDashboardExportResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "space",
            "description": "The space where the dashboard should be imported"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "index-pattern",
            "description": "Replace the index-pattern of imported objects"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "force",
            "description": "Override existing objects"
          }
        ]
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List your hosted files",
        "description": "List your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getFiles"
      }
    },
    "/files/{filename}": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Remove one file from your hosted files",
        "description": "Remove one file from your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string",
              "example": "univ-foobar_2017-08-17.csv"
            },
            "description": "The file to be removed.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "deleteFile"
      }
    },
    "/files/delete_batch": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Remove a list of files from your hosted files",
        "description": "Remove a list of files from your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "univ-foobar_2017-08-17.csv"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "List of files successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "deleteMultipleFiles"
      }
    },
    "/indices/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Create an index",
        "operationId": "post-indices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "acknowledged": {
                      "type": "boolean"
                    },
                    "shards_acknowledged": {
                      "type": "boolean"
                    },
                    "index": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "acknowledged",
                    "shards_acknowledged",
                    "index"
                  ],
                  "x-examples": {
                    "example-1": {
                      "acknowledged": true,
                      "shards_acknowledged": true,
                      "index": "toulouse-foobarfoo"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Initialize an index with a predefined mapping, either for access events or publisher data.",
        "tags": [
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ezpaarse",
                "publisher"
              ],
              "default": "ezpaarse"
            },
            "in": "query",
            "name": "type",
            "description": "the type of index"
          }
        ]
      },
      "get": {
        "summary": "Get an index",
        "operationId": "get-indices-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ElasticsearchIndex"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Administration"
        ],
        "description": "Get information about an index",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an index",
        "operationId": "delete-indices-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Delete an ElasticSearch index",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Indices"
        ]
      }
    },
    "/institutions": {
      "get": {
        "summary": "Get institutions",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "operationId": "get-institutions",
        "description": "Get all institutions",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create an institution",
        "operationId": "post-institutions",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Create an institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Institution"
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "creator",
            "description": "if set to false, the authenticated user will not be registered as the institution creator (requires admin permissions)"
          }
        ]
      }
    },
    "/institutions/{id}/validated": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Change validation state of an institution",
        "operationId": "put-institutions-id-validated",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Change validation state of an institution",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ]
      }
    },
    "/institutions/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get an institution",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-institutions-id",
        "description": "Get an institution by ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an institution",
        "operationId": "delete-institutions-id",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete an institution.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Institutions"
        ]
      },
      "put": {
        "summary": "Update an institution",
        "operationId": "put-institutions-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update an institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Institution"
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/institutions/{id}/sushi": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get SUSHI credentials of an institution",
        "tags": [
          "Institutions",
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sushi"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-institutions-id-sushi",
        "description": "Get SUSHI credentials of an institution.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "working",
                "faulty",
                "untested"
              ]
            },
            "in": "query",
            "name": "connection",
            "description": "filter items depending on connection state"
          }
        ]
      }
    },
    "/institutions/{id}/memberships": {
      "get": {
        "summary": "Get institution memberships",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Membership"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "get-institutions-:id-members",
        "description": "Get the memberships of an institution. Must be either admin or institution contact."
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        }
      ]
    },
    "/institutions/{id}/contacts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get the contacts of an institution",
        "tags": [
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-institutions-$-id-contacts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get contact of institutions"
      }
    },
    "/institutions/{id}/memberships/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true,
          "description": "Username of the member"
        }
      ],
      "get": {
        "summary": "Get the membership of a user for an institution",
        "tags": [
          "Institutions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "institution",
                  "spacePermissions",
                  "repositoryPermissions"
                ]
              }
            },
            "name": "include",
            "in": "query",
            "description": "Relations that should be included in the response"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "username",
            "in": "path",
            "required": true,
            "description": "Username of the member"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-institutions-id-members-username",
        "description": "Get the membership of a user for an institution",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Create or a update a user membership for an institution",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "operationId": "put-institutions-id-members-username",
        "description": "Create or a update a user membership for an institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Membership"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a membership",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "operationId": "delete-institutions-id-members-username",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Remove a member from an institution"
      }
    },
    "/institutions/{id}/subinstitutions": {
      "get": {
        "summary": "Get institution sub-institutions",
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "get-institutions-:id-subinstitutions",
        "description": "Get the sub-institutions of an institution. Must be admin."
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        }
      ]
    },
    "/institutions/{id}/subinstitutions/{subid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "subid",
          "in": "path",
          "required": true,
          "description": "ID of the sub-institution"
        }
      ],
      "put": {
        "summary": "Add a sub-institution to an institution",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "operationId": "put-institutions-id-subinstitutions-subid",
        "description": "Add a sub-institution to an institution. Must be admin.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a sub-institution",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "operationId": "delete-institutions-id-subinstitutions-subid",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Remove a sub-institution from an institution. Must be admin."
      }
    },
    "/institutions/{id}/repositories": {
      "get": {
        "summary": "Get institution repositories",
        "tags": [
          "Institutions",
          "Repositories"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "get-institutions-:id-repositories",
        "description": "Get the repositories of an institution. Must be either admin or have read access to members."
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        }
      ]
    },
    "/institutions/{id}/state": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the institution"
        }
      ],
      "get": {
        "summary": "Get institution state",
        "tags": [
          "Institutions",
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "space": {
                        "id": "toulouse",
                        "name": "toulouse",
                        "description": "Université Toulouse-II",
                        "disabledFeatures": []
                      },
                      "indices": [
                        "toulouse",
                        "toulouse-foo",
                        "toulouse-foobar"
                      ],
                      "indexPatterns": [
                        {
                          "id": "902cf200-b97c-11eb-aae3-e9a25566a440",
                          "title": "toulouse*",
                          "timeFieldName": "datetime"
                        },
                        {
                          "id": "34a502d0-b391-11e9-8339-63cd4d0c5d94",
                          "title": "univ-example",
                          "timeFieldName": "datetime"
                        }
                      ],
                      "roles": {
                        "base": {
                          "name": "toulouse",
                          "exists": true
                        },
                        "readonly": {
                          "name": "toulouse_read_only",
                          "exists": true
                        }
                      }
                    }
                  },
                  "properties": {
                    "spaces": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Space"
                      }
                    },
                    "indices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "indexPatterns": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1
                          },
                          "title": {
                            "type": "string",
                            "minLength": 1
                          },
                          "timeFieldName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "spaceId": {
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "required": [
                          "id",
                          "title"
                        ]
                      }
                    },
                    "roles": {
                      "type": "object",
                      "required": [
                        "base",
                        "readonly"
                      ],
                      "properties": {
                        "base": {
                          "type": "object",
                          "required": [
                            "exists"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "exists": {
                              "type": "boolean"
                            }
                          }
                        },
                        "readonly": {
                          "type": "object",
                          "required": [
                            "exists"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "exists": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "spaces",
                    "indices",
                    "indexPatterns",
                    "roles"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-institutions-id-state",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get the current state of an institution (list spaces, indices, index patterns and roles)",
        "x-internal": false
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "List existing indices",
        "description": "List the existing indices you are allowed to see.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getLogs"
      }
    },
    "/logs/{index}": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Insert data into an index",
        "description": "Insert access events into an index.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be inserted",
            "required": true
          },
          {
            "in": "header",
            "name": "Split-Fields",
            "schema": {
              "type": "string",
              "pattern": "^([^()]+?\\([^()]+?\\))+$"
            },
            "description": "a list of multivalued fields, formatted as __\"fieldname(delimitor)\"__, and separated with whitespaces. Example: __\"ezproxy-groups(+) subjects(,)\"__"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "examples": {}
            },
            "text/csv": {
              "schema": {
                "type": "object",
                "example": {
                  "datetime": "2018-03-22T11:37:42+02:00",
                  "platform": "npg",
                  "rtype": "ARTICLE",
                  "mime": "HTML",
                  "domain": "www.nature.com",
                  "title_id": "41564",
                  "log_id": "d5d680b88def9bc4b41d4b94f22d60514e54689e",
                  "url": "https://www.nature.com/articles/s41564-018-0156-0",
                  "status": "200",
                  "doi": ""
                },
                "properties": {
                  "datetime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "log_id": {
                    "type": "string"
                  },
                  "rtype": {
                    "type": "string",
                    "nullable": true
                  },
                  "mime": {
                    "type": "string",
                    "nullable": true
                  },
                  "doi": {
                    "type": "string",
                    "nullable": true
                  },
                  "title_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "status": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "publication_title": {
                    "type": "string"
                  }
                },
                "required": [
                  "datetime",
                  "log_id",
                  "rtype",
                  "mime",
                  "doi",
                  "title_id"
                ]
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "insertLogs"
      },
      "delete": {
        "summary": "Delete an index",
        "operationId": "delete-logs-index",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "acknowledge": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "acknowledge"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete an index",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Indices"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "index",
          "in": "path",
          "required": true,
          "description": "name of the index"
        }
      ]
    },
    "/logs/{index}/events": {
      "delete": {
        "tags": [
          "Indices"
        ],
        "summary": "Remove data from an index",
        "description": "Remove access events from an index. Defaults to everything if no condition provided.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be removed",
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-24T12:00:00",
            "description": "Earliest date of the events that should be removed. Can be either a date or datetime in ISO format."
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-25T12:00:00",
            "description": "Latest date of the events that should be removed. Can be either a date or datetime in ISO format."
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexRemove"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "deleteEvents"
      }
    },
    "/logs/{index}/tops": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Get top metrics for an index",
        "description": "Get top metrics for an index.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "The index to get tops from.",
            "required": true
          },
          {
            "in": "query",
            "name": "period",
            "description": "The time span covered.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "current_week",
                "last_week",
                "current_month",
                "last_month",
                "current_year",
                "last_year",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The size of the tops.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "topLogs"
      }
    },
    "/logs/{index}/search": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Search in indices",
        "description": "Perform search in indices using Elasticsearch Search API.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "externalDocs": {
          "description": "More about Elasticsearch Query DSL and aggregations can be found on",
          "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"
        },
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index to search",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Elasticsearch query",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "size": 0,
                  "query": {
                    "term": {
                      "platform": "npg"
                    }
                  },
                  "aggs": {
                    "rtypes": {
                      "terms": {
                        "field": "rtype",
                        "size": 5
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Raw response as returned by Elasticsearch"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "searchLogs"
      }
    },
    "/logs/{index}/aggregation.{extension}": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Export all aggregated combinations of the given fields",
        "description": "Export all aggregated combinations of the given fields",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "The index that contains the consultations to be aggregated",
            "required": true
          },
          {
            "in": "path",
            "name": "extension",
            "schema": {
              "type": "string",
              "enum": [
                "csv",
                "ndjson"
              ]
            },
            "description": "The export format",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Comma-separated list of fields that should be aggregated",
            "schema": {
              "type": "string",
              "example": "rtype,mime"
            }
          },
          {
            "in": "query",
            "name": "missing",
            "description": "Include combinations with missing values",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "Start date of the period to be aggregated",
            "schema": {
              "type": "string",
              "example": "2020-01-01"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "End date of the period to be aggregated",
            "schema": {
              "type": "string",
              "example": "2020-12-31"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "A list of filters in O-Rison format, that should be applied before performing the aggregation",
            "schema": {
              "type": "string"
            },
            "examples": {
              "simple": {
                "value": "platform:wiley,status:200",
                "summary": "Single value",
                "description": "Filter a single value by specifying a field and a value. Strings containing spaces should be surrounded by simple quotes `'`."
              },
              "multiple": {
                "value": "platform:!(wiley,cairn),status:!(200,304)",
                "summary": "Multiple values",
                "description": "Filter multiple values by placing them inside `!( )`."
              },
              "range": {
                "value": "status:(gte:200,lt:400)",
                "summary": "Numeric range",
                "description": "Filter a numeric range by using `gt`/`gte`/`lt`/`lte` inside `( )`."
              },
              "negate": {
                "value": "platform:(not:wiley)",
                "summary": "Negate filter",
                "description": "Negate a filter by placing it inside `(not: )`"
              }
            }
          },
          {
            "in": "query",
            "name": "delimiter",
            "description": "Delimiter for the CSV output. Use `tab` to get tab-seperated values.",
            "schema": {
              "type": "string",
              "example": ","
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/x-ndjson": {
                "examples": {
                  "example-1": {
                    "value": "{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"PDF\" }, \"doc_count\": 42 }\n{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"HTML\" }, \"doc_count\": 17 }"
                  }
                },
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "example": "doc_count;rtype;mime\n42;ARTICLE;PDF\n17;ARTICLE;HTML"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "aggregateLogs"
      }
    },
    "/logs/{index}/counterize": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Export aggregated COUNTER metrics into another index",
        "description": "Export aggregated COUNTER metrics into another index",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index that contains the consultations to be aggregated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "destination"
                ],
                "properties": {
                  "destination": {
                    "type": "string",
                    "description": "The index where aggregations should be stored",
                    "example": "univ-foobar-counter5"
                  },
                  "from": {
                    "type": "string",
                    "example": "2020-01"
                  },
                  "to": {
                    "type": "string",
                    "example": "2020-04"
                  },
                  "platform": {
                    "type": "string",
                    "description": "filter aggregations for a specific platform",
                    "example": "wiley"
                  },
                  "sessionField": {
                    "type": "string",
                    "description": "The field that holds the session ID, for unique request/investigation counting",
                    "example": "ezproxy-session"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "counterizeLogs"
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get general metrics",
        "description": "Get general metrics about the data hosted on ezMESURE.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getMetrics"
      }
    },
    "/partners": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "summary": "Get partners",
        "description": "Get the list of validated institutions.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "acronym": {
                        "type": "string"
                      },
                      "social": {
                        "type": "object",
                        "properties": {
                          "twitterUrl": {
                            "type": "string"
                          },
                          "youtubeUrl": {
                            "type": "string"
                          },
                          "facebookUrl": {
                            "type": "string"
                          },
                          "linkedinUrl": {
                            "type": "string"
                          }
                        }
                      },
                      "servicesEnabled": {
                        "type": "object",
                        "properties": {
                          "ezpaarse": {
                            "type": "boolean"
                          },
                          "ezcounter": {
                            "type": "boolean"
                          },
                          "ezreeport": {
                            "type": "boolean"
                          }
                        }
                      },
                      "contacts": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fullName": {
                              "type": "string"
                            },
                            "roles": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": [
                      {
                        "name": "Centre national de la recherche scientifique",
                        "acronym": "CNRS",
                        "social": {
                          "twitterUrl": "",
                          "youtubeUrl": "",
                          "facebookUrl": "",
                          "linkedinUrl": ""
                        },
                        "servicesEnabled": {
                          "ezpaarse": true,
                          "ezcounter": true,
                          "ezreeport": true
                        },
                        "contacts": [
                          {
                            "fullName": "Tom SUBLET",
                            "roles": [
                              "contact:tech"
                            ]
                          },
                          {
                            "fullName": "ezMESURE Administrator",
                            "roles": [
                              "contact:doc"
                            ]
                          },
                          {
                            "fullName": "Yannick SCHURTER",
                            "roles": [
                              "contact:tech"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "operationId": "getInstitutions"
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fetch profile",
        "description": "Get the profile associated with the JWT token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getProfile"
      }
    },
    "/profile/token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an authorization token",
        "description": "Actually requires a JWT token (typically stored in cookies). This route provides you with a token from the user space.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token generated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiZW1haWwiOiJkb28uam9obkB1bml2ZXJzZS5vcmciLCJpYXQiOjE1MTYyMzkwMjJ9.QsXZLquqEZY4q0XhDEvbEm_LzYEuPToboyUZFZrQSbE"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getAuthToken"
      }
    },
    "/profile/terms/accept": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Accept terms of service",
        "description": "Accept terms of service. You should read them first!",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Terms accepted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "acceptTerms"
      }
    },
    "/profile/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Kibana password",
        "description": "Reset Kibana password of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Password successfully reset"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "resetPassword"
      }
    },
    "/queues": {
      "get": {
        "summary": "Get status of all job queues",
        "tags": [
          "Jobs"
        ],
        "operationId": "get-jobs",
        "description": "Get queue status for all job types",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Queue"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "parameters": []
    },
    "/queues/{type}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "harvest"
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "job type"
        }
      ],
      "get": {
        "summary": "Get status of a job queue",
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-jobs-type",
        "description": "Get the status of a specific job queue",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/queues/{type}/_pause": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "harvest"
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "job type"
        }
      ],
      "post": {
        "summary": "Pause a job queue",
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paused": {
                      "type": "boolean",
                      "description": "Whether the queue is paused or not"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-jobs-type-_pause",
        "description": "Pause a job queue (does not affect jobs that are already running)",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/queues/{type}/_resume": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "harvest"
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "job type"
        }
      ],
      "post": {
        "summary": "Resume a job queue",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paused": {
                      "type": "boolean",
                      "description": "Whether the queue is paused or not"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-jobs-type-_resume",
        "description": "Resume a job queue",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Jobs"
        ]
      }
    },
    "/repositories": {
      "get": {
        "operationId": "get-repositories",
        "summary": "Get all repositories",
        "description": "Get all data repositories",
        "tags": [
          "Repositories"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "A query for searching in repository patterns"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type",
            "description": "Filter by repository type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "institutionId",
            "description": "Filter by institution ID"
          }
        ]
      },
      "post": {
        "summary": "Create a repository endpoint",
        "description": "Create a new data repository",
        "operationId": "post-repositories",
        "tags": [
          "Repositories"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Repository"
                  },
                  {
                    "properties": {
                      "institutionId": {
                        "readOnly": false
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/repositories/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the repository"
        }
      ],
      "patch": {
        "summary": "Update a data repository",
        "description": "Update a data repository",
        "operationId": "patch-repositories-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repository"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a repository",
        "description": "Get a data repository",
        "operationId": "get-repository-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Repositories"
        ]
      },
      "delete": {
        "summary": "Delete a repository",
        "description": "Delete a data repository",
        "operationId": "delete-repository-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/repositories/{id}/permissions/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the repository"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true,
          "description": "username of the member"
        }
      ],
      "put": {
        "summary": "Set repository permissions for a user",
        "description": "Set repository permissions for a user",
        "operationId": "put-repositories-id-permissions-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryPermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryPermission"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete repository permissions for a user",
        "description": "Delete repository permissions for a user, so that he cannot access it anymore",
        "operationId": "delete-repository-id-permissions-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryPermission"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "Get Kibana roles",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KibanaRole"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-roles",
        "description": "List all Kibana roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "reserved",
            "description": "include reserved roles"
          }
        ]
      }
    },
    "/roles/{roleName}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roleName",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Create or update role",
        "operationId": "put-roles-roleName",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Create or update a Kibana role",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Kibana"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KibanaRole"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a role",
        "operationId": "get-roles-roleName",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KibanaRole"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get a role by its name",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a role",
        "operationId": "delete-roles-roleName",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Delete a Kibana role",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Kibana"
        ]
      }
    },
    "/kibana-spaces": {
      "get": {
        "summary": "List affected Kibana spaces",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "q",
            "in": "query",
            "description": "A query, for search"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "type",
            "in": "query",
            "example": "counter5",
            "description": "Filter spaces by type"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "institutionId",
            "in": "query",
            "description": "Filter spaces by institution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Space"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-kibana-spaces",
        "description": "List Kibana spaces",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a Kibana space",
        "operationId": "post-kibana-spaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Administration",
          "Kibana"
        ],
        "description": "Create and assign a new Kibana space",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Space"
              }
            }
          }
        }
      }
    },
    "/kibana-spaces/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a Kibana space",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-kibana-spaces-id",
        "description": "Get a specific Kibana space",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Update a Kibana space",
        "operationId": "patch-kibana-spaces-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Administration",
          "Kibana"
        ],
        "description": "Update a Kibana space",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Space"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a Kibana space",
        "operationId": "delete-kibana-space-spaceId",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Delete a Kibana space",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Kibana"
        ]
      }
    },
    "/kibana-spaces/{id}/permissions/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the space"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true,
          "description": "username of the member"
        }
      ],
      "put": {
        "summary": "Set space permissions for a user",
        "description": "Set space permissions for a user",
        "operationId": "put-kibana-spaces-id-permissions-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpacePermission"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Kibana"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpacePermission"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete space permissions for a user",
        "description": "Delete space permissions for a user, so that he cannot access it anymore",
        "operationId": "delete-space-id-permissions-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpacePermission"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Kibana"
        ]
      }
    },
    "/spaces": {
      "get": {
        "summary": "List spaces",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Space"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-spaces",
        "description": "List spaces",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a space",
        "operationId": "post-spaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Administration",
          "Kibana"
        ],
        "description": "Create a Kibana space",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Space"
              }
            }
          }
        }
      }
    },
    "/spaces/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a space",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-spaces-id",
        "description": "Get a specific space",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update a space",
        "operationId": "put-spaces-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Administration",
          "Kibana"
        ],
        "description": "Update a Kibana space",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Space"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a space",
        "operationId": "delete-space-spaceId",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Delete a Kibana space",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Kibana"
        ]
      }
    },
    "/spaces/{id}/index-patterns": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List index patterns in a space",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KibanaSavedObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-spaces-id-index-patterns",
        "description": "List index patterns in a space",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create an index pattern",
        "operationId": "post-spaces-id-index-patterns",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPattern"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Create an index pattern in a given space",
        "tags": [
          "Administration",
          "Kibana"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexPatternAttributes"
              }
            }
          }
        }
      }
    },
    "/harvests": {
      "parameters": [],
      "get": {
        "summary": "Get harvests",
        "tags": [
          "Harvests"
        ],
        "parameters": [
          {
            "name": "from",
            "description": "Start date of the period",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "[0-9]{4}-[0-9]{2}"
            }
          },
          {
            "name": "to",
            "description": "End date of the period",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "[0-9]{4}-[0-9]{2}"
            }
          },
          {
            "name": "reportId",
            "description": "Filter by report ID",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tr"
            }
          },
          {
            "name": "size",
            "description": "Number of harvests to get. Defaults to all.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Result page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "description": "A field to sort on",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Sort order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Harvest"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-harvests",
        "description": "Get harvests",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions": {
      "parameters": [],
      "get": {
        "summary": "Get harvest sessions",
        "tags": [
          "Harvests"
        ],
        "parameters": [
          {
            "name": "size",
            "description": "Number of harvests to get. Defaults to all.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Result page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "description": "A field to sort on",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Sort order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "schema": { "type": "integer" },
                "description": "Number of items available"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HarvestSession"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-harvests-sessions",
        "description": "Get harvest sessions",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new harvest session",
        "tags": [
          "Harvests"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "beginDate": {
                    "description": "Begin date of the period to be harvested",
                    "type": "string",
                    "format": "date",
                    "pattern": "yyyy-MM",
                    "required": true
                  },
                  "endDate": {
                    "description": "End date of the period to be harvested",
                    "type": "string",
                    "format": "date",
                    "pattern": "yyyy-MM",
                    "required": true
                  },
                  "credentialsQuery": {
                    "type": "object",
                    "description": "Query used to get credentials to harvest",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      },
                      "institutionIds": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      },
                      "endpointIds": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      }
                    }
                  },
                  "reportTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "required": true
                  },
                  "allowFaulty": {
                    "type": "boolean",
                    "description": "Allow faulty endpoints to be harvested",
                    "default": false
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Maximum job duration in seconds",
                    "default": 600
                  },
                  "forceDownload": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to download the report even if a local copy exists"
                  },
                  "ignoreValidation": {
                    "type": "boolean",
                    "default": null,
                    "format": "nullable",
                    "description": "Try to import the report even if validation fails"
                  },
                  "params": {
                    "type": "object",
                    "default": {},
                    "description": "Additional job parameters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "419": {
            "description": "Action is forbidden for the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "post-harvests-sessions",
        "description": "Create harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions/status": {
      "parameters": [
        {
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": "harvestIds",
          "in": "query",
          "required": true
        }
      ],
      "get": {
        "summary": "Get status of a harvests sessions",
        "tags": [
          "Harvests"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/HarvestSessionStatus"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-harvests-sessions-status",
        "description": "Get harvest sessions' status",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions/{harvestId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "harvestId",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Upsert a new harvest session",
        "tags": [
          "Harvests"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "beginDate": {
                    "description": "Begin date of the period to be harvested",
                    "type": "string",
                    "format": "date",
                    "pattern": "yyyy-MM",
                    "required": true
                  },
                  "endDate": {
                    "description": "End date of the period to be harvested",
                    "type": "string",
                    "format": "date",
                    "pattern": "yyyy-MM",
                    "required": true
                  },
                  "credentialsQuery": {
                    "type": "object",
                    "description": "Query used to get credentials to harvest",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      },
                      "institutionIds": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      },
                      "endpointIds": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ItemID"
                        }
                      }
                    }
                  },
                  "reportTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "required": true
                  },
                  "allowFaulty": {
                    "type": "boolean",
                    "description": "Allow faulty endpoints to be harvested",
                    "default": false
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Maximum job duration in seconds",
                    "default": 600
                  },
                  "forceDownload": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to download the report even if a local copy exists"
                  },
                  "ignoreValidation": {
                    "type": "boolean",
                    "default": null,
                    "format": "nullable",
                    "description": "Try to import the report even if validation fails"
                  },
                  "params": {
                    "type": "object",
                    "default": {},
                    "description": "Additional job parameters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "419": {
            "$ref": "#/components/responses/ConflictError"
          }
        },
        "operationId": "put-harvests-sessions",
        "description": "Upsert harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an harvest session and stop jobs under it",
        "tags": [
          "Harvests"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "delete-harvests-sessions",
        "description": "Delete an harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions/{harvestId}/_start": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "harvestId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Start a harvest session",
        "tags": [
          "Harvests"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "restartAll": {
                    "type": "boolean",
                    "default": null,
                    "format": "nullable",
                    "description": "Restart all jobs, not only the failed ones"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HarvestJob"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "419": {
            "$ref": "#/components/responses/ConflictError"
          }
        },
        "operationId": "post-harvests-sessions-_start",
        "description": "Start harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions/{harvestId}/_stop": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "harvestId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Stop a harvest session and cancel jobs under it",
        "tags": [
          "Harvests"
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "post-harvests-sessions-_stop",
        "description": "Stop harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/harvests-sessions/{harvestId}/credentials": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "harvestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get credentials concerned by an harvest session",
        "tags": [
          "Harvests"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SushiCredentials"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-harvests-sessions-credentials",
        "description": "Get credentials concerned by an harvest session",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi": {
      "get": {
        "summary": "Get all Sushi items",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sushi"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-sushi",
        "description": "Get all Sushi items",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "working",
                "faulty",
                "untested"
              ]
            },
            "in": "query",
            "name": "connection",
            "description": "filter items depending on connection state"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "filter items by endpoint ID",
            "name": "endpointId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "institutionId",
            "description": "filter items by institution ID"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "id",
            "description": "filter items by ID"
          }
        ]
      },
      "post": {
        "summary": "Create a Sushi item",
        "operationId": "post-sushi",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a new Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sushi"
              }
            }
          }
        }
      }
    },
    "/sushi/_import": {
      "post": {
        "summary": "Import SUSHI items",
        "operationId": "post-sushi-_import",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "integer",
                      "description": "number of items that failed to be imported"
                    },
                    "conflicts": {
                      "type": "integer",
                      "description": "number of items that already exists"
                    },
                    "created": {
                      "type": "number",
                      "description": "number if items that were successfuly imported"
                    },
                    "items": {
                      "type": "array",
                      "description": "operation details for each item",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "import status of the item",
                            "enum": [
                              "error",
                              "conflict",
                              "created"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "description": "error or conflict message"
                          },
                          "data": {
                            "$ref": "#/components/schemas/Sushi"
                          }
                        },
                        "required": [
                          "status",
                          "data"
                        ]
                      }
                    }
                  },
                  "required": [
                    "errors",
                    "conflicts",
                    "created",
                    "items"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Import a list of Sushi items",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "institutionId",
            "required": true,
            "description": "ID of the institution that owns the SUSHI items"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "overwrite",
            "description": "overwrite item if one with the same ID already exists"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/sushi/_lock": {
      "put": {
        "summary": "Lock SUSHI identifiers management",
        "operationId": "put-sushi-_lock",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locked": {
                      "type": "boolean",
                      "description": "Whether the management is locked or not"
                    }
                  },
                  "required": [
                    "locked"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Sushi",
          "Administration"
        ],
        "description": "Lock SUSHI identifiers management",
        "x-internal": false,
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "locked": {
                    "type": "boolean",
                    "description": "Wether the management should be locked or not"
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason of the lock"
                  }
                },
                "required": [
                  "locked"
                ]
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get SUSHI management lock status",
        "operationId": "get-sushi-_lock",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locked": {
                      "type": "boolean",
                      "description": "Wether SUSHI management is locked or not"
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason of the lock"
                    }
                  },
                  "required": [
                    "locked"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Get the current lock status of SUSHI management.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update a Sushi item",
        "operationId": "patch-sushi-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Update a Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sushi"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a SUSHI item",
        "operationId": "get-sushi-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Get a Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ]
      },
      "delete": {
        "summary": "Delete a SUSHI item",
        "description": "GDeleteet a SUSHI item",
        "operationId": "delete-sushi-id",
        "responses": {
          "204": {
            "description": "SUSHI item successfully deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ]
      }
    },
    "/sushi/{id}/_check_connection": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Sushi"
        ],
        "summary": "Check SUSHI connection",
        "operationId": "post-sushi-id-check-connection",
        "description": "Check the connection to the SUSHI endpoint and update the connection state of the SUSHI credentials",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiCredentials"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/sushi/{id}/connection": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "tags": [
          "Sushi"
        ],
        "summary": "Reset SUSHI crendentials connection",
        "operationId": "delete-sushi-id-connection",
        "description": "Reset the connection state of the SUSHI credentials",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/sushi/{id}/files": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List files in the directory of a SUSHI item",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-sushi-id-files",
        "description": "List files in the directory of a SUSHI item.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi/{id}/harvests": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get harvests of a SUSHI item",
        "tags": [
          "Sushi"
        ],
        "parameters": [
          {
            "name": "from",
            "description": "Start date of the period",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "[0-9]{4}-[0-9]{2}"
            }
          },
          {
            "name": "to",
            "description": "End date of the period",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "[0-9]{4}-[0-9]{2}"
            }
          },
          {
            "name": "reportId",
            "description": "Filter by report ID",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tr"
            }
          },
          {
            "name": "size",
            "description": "Number of harvests to get. Defaults to all.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Result page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "description": "A field to sort on",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Sort order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Harvest"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-sushi-id-harvests",
        "description": "Get harvests of a SUSHI item",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi/{id}/report.json": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Download a COUNTER report",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "The COUNTER report is returned in the body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "202": {
            "description": "The COUNTER report download has been initiated, or the download is not finised yet. Retry the same link later until the report is available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "headers": {
              "Retry-After": {
                "schema": {
                  "type": "integer"
                },
                "description": "Waiting time in seconds"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-sushi-id-report.json",
        "description": "Download a COUNTER report using data from a Sushi item, between two given months. If no period is specified, defaults to the previous month.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "2020-01",
              "pattern": "^[0-9]{4}-[0-9]{2}$"
            },
            "in": "query",
            "name": "beginDate",
            "description": "first month of the report period"
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9]{4}-[0-9]{2}$",
              "example": "2020-01"
            },
            "in": "query",
            "name": "endDate",
            "description": "last month of the report period"
          }
        ]
      }
    },
    "/sushi/{id}/tasks": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get tasks of a Sushi item",
        "tags": [
          "Tasks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HarvestJob"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-sushi-id-tasks",
        "description": "Get tasks related to a Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi-endpoints": {
      "get": {
        "summary": "Get all SUSHI endpoints",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SushiEndpoint"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-sushi-endpoints",
        "description": "Get all SUSHI endpoints",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "requireCustomerId",
            "description": "Filter endpoints by requireCustomerId"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "requireRequestorId",
            "description": "Filter endpoints by requireRequestorId"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "requireApiKey",
            "description": "Filter endpoints by requireApiKey"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "isSushiCompliant",
            "description": "Filter endpoints by isSushiCompliant"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "tags",
            "description": "Filter endpoints by tags (comma-separated)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "A query for searching"
          }
        ]
      },
      "post": {
        "summary": "Create a SUSHI endpoint",
        "operationId": "post-sushi-endpoints",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiEndpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Add a new SUSHI endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SushiEndpoint"
              }
            }
          }
        },
        "tags": [
          "Sushi"
        ]
      }
    },
    "/sushi-endpoints/_import": {
      "post": {
        "summary": "Import SUSHI endpoints",
        "operationId": "post-sushi-endpoint-_import",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "integer",
                      "description": "number of items that failed to be imported"
                    },
                    "conflicts": {
                      "type": "integer",
                      "description": "number of items that already exists"
                    },
                    "created": {
                      "type": "number",
                      "description": "number if items that were successfuly imported"
                    },
                    "items": {
                      "type": "array",
                      "description": "operation details for each item",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "import status of the item",
                            "enum": [
                              "error",
                              "conflict",
                              "created"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "description": "error or conflict message"
                          },
                          "data": {
                            "$ref": "#/components/schemas/SushiEndpoint"
                          }
                        },
                        "required": [
                          "status",
                          "data"
                        ]
                      }
                    }
                  },
                  "required": [
                    "errors",
                    "conflicts",
                    "created",
                    "items"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Import a list of SUSHI endpoints",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "overwrite",
            "description": "overwrite item if one with the same ID already exists"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SushiEndpoint"
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/sushi-endpoints/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the endpoint"
        }
      ],
      "patch": {
        "summary": "Update a SUSHI endpoint",
        "operationId": "patch-sushi-endpoint-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiEndpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Update a SUSHI endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SushiEndpoint"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a SUSHI endpoint",
        "operationId": "get-sushi-endpoint-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SushiEndpoint"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Get a SUSHI endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ]
      },
      "delete": {
        "summary": "Delete a SUSHI endpoint",
        "operationId": "delete-sushi-endpoints-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Delete a SUSHI endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ]
      }
    },
    "/sync/_start": {
      "parameters": [],
      "post": {
        "summary": "Start a synchronization",
        "description": "Start a global synchronization with Elasticsearch and Kibana",
        "operationId": "post-sync-_start",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sync": {
      "parameters": [],
      "get": {
        "summary": "Get synchronization status",
        "description": "Get the status of the current synchronization process",
        "operationId": "get-sync",
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/tasks": {
      "get": {
        "summary": "Get all tasks",
        "tags": [
          "Tasks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HarvestJob"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-tasks",
        "description": "Get all tasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "array",
              "pattern": "[A-Za-z,]+"
            },
            "in": "query",
            "name": "status",
            "description": "filter tasks by status"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "id",
            "description": "filter tasks by ID"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "type",
            "description": "filter tasks by type"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "institutionId",
            "description": "filter tasks by institution ID"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "credentialsId",
            "description": "filter tasks by ID of SUSHI credentials"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "endpointId",
            "description": "filter tasks by endpoint ID"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "harvestId",
            "description": "filter tasks by harvest ID"
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "distinct",
            "description": "a combination of fields that should be distinct"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "size",
            "description": "maximum number of tasks to get"
          }
        ]
      }
    },
    "/tasks/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a task",
        "tags": [
          "Tasks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJob"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "get-tasks-id",
        "description": "Get a specific task",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a task",
        "operationId": "delete-tasks-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete a task, and the associated job if any. This is not possible if the associated job is active.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/{id}/_cancel": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Cancel a task",
        "operationId": "post-tasks-id-_cancel",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HarvestJob"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Cancel a task, and interrupt the associated job if it's active.",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "operationId": "get-users",
        "description": "List users. Limited to 10.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "a query for searching"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "size",
            "description": "a query to change users list limit size"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "source",
            "description": "a query to retrieve more information, the fields are separated by a comma"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/_import": {
      "post": {
        "summary": "Import a list of users",
        "operationId": "post-users-import",
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "overwrite",
            "description": "overwrite item if one with the same username already exists"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "integer",
                      "description": "number of items that failed to be imported"
                    },
                    "conflicts": {
                      "type": "integer",
                      "description": "number of items that already exists"
                    },
                    "created": {
                      "type": "number",
                      "description": "number if items that were successfuly imported"
                    },
                    "items": {
                      "type": "array",
                      "description": "operation details for each item",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "import status of the item",
                            "enum": [
                              "error",
                              "conflict",
                              "created"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "description": "error or conflict message"
                          },
                          "data": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "required": [
                          "status",
                          "data"
                        ]
                      }
                    }
                  },
                  "required": [
                    "errors",
                    "conflicts",
                    "created",
                    "items"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Import a list of users",
        "tags": [
          "Users",
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "username": {
                          "description": "Username",
                          "type": "string",
                          "example": "john.doo"
                        },
                        "subinstitutions": {
                          "$ref": "#/components/schemas/Membership"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-users-username",
        "description": "Get a user by his username",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "put": {
        "summary": "Create or replace a user",
        "operationId": "put-users-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Create or replace a user",
        "tags": [
          "Users",
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Partially update a user",
        "operationId": "patch-users-username",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Partially update a user",
        "tags": [
          "Users",
          "Administration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "delete-user-username",
        "responses": {
          "200": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "found": {
                      "type": "boolean",
                      "description": "whether the user was found or not"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Administration",
          "Users"
        ]
      }
    },
    "/users/{username}/institution": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get the institution of a user",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-users-id-institution",
        "description": "Get the institution of a user",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{username}/_impersonate": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Impersonate a user",
        "description": "Login on behalf of a given user. Requires admin privileges.",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "post-users-username-impersonate",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}