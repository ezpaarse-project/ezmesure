// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("EZMESURE_POSTGRES_URL")
}

/// An institution
model Institution {
  /// ID of the institution
  id                  String             @id @default(cuid())
  /// ID of the parent institution
  parentInstitutionId String?
  /// The parent institution
  parentInstitution   Institution?       @relation("ParentInstitution", fields: [parentInstitutionId], references: [id])
  /// Creation date
  createdAt           DateTime           @default(now())
  /// Latest update date
  updatedAt           DateTime           @updatedAt
  /// Institution name
  name                String
  /// Institution namespace (ex: b-bibcnrs)
  namespace           String?
  /// Whether the institution has been validated or not
  validated           Boolean            @default(false)
  /// Whether the institution should appear in the partner list or not
  hidePartner         Boolean            @default(false)
  /// A list of tags associated to the institution
  tags                String[]
  /// ID of the institution logo
  logoId              String?
  /// Institution type (ex: university)
  type                String?
  /// Institution acrynom
  acronym             String?
  /// Institution website URL
  websiteUrl          String?
  /// Institution city
  city                String?
  /// Institution UAI (Unité Administrative Immatriculée)
  uai                 String?
  /// Social links of the institution
  social              Json?
  /// Date when SUSHI credentials have been marked as ready for harvest
  sushiReadySince     DateTime?
  /// Institution members
  memberships         Membership[]
  /// Institution spaces
  spaces              Space[]
  /// Actions that were triggered in the scope of the institution
  actions             Action[]
  /// Institution SUSHI credentials
  sushiCredentials    SushiCredentials[]
  /// Child institutions
  childInstitutions   Institution[]      @relation("ParentInstitution")
  /// Institution repositories
  repositories        Repository[]
}

/// A user
model User {
  /// The username
  username    String       @id
  /// Full name
  fullName    String
  /// Email
  email       String
  /// Creation date
  createdAt   DateTime     @default(now())
  /// Latest update date
  updatedAt   DateTime     @updatedAt
  /// Whether the user has admin access or not
  isAdmin     Boolean      @default(false)
  /// Arbitrary metadata
  metadata    Json         @default("{}")
  /// User memberships
  memberships Membership[]
  /// Actions that were triggered by the user
  actions     Action[]
}

/// A membership (a user belonging to an institution)
model Membership {
  /// Username of the member
  username              String
  /// The member
  user                  User                   @relation(fields: [username], references: [username], onDelete: Cascade)
  /// ID of the institution
  institutionId         String
  /// The institution
  institution           Institution            @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// Roles of the member inside the institution
  roles                 String[]
  /// Permissions of the user for the institution (members management, SUSHI, ezREEPORT...)
  permissions           String[]
  /// Permissions of the user for the institution spaces
  spacePermissions      SpacePermission[]
  /// Permissions of the user for the institution repositories
  repositoryPermissions RepositoryPermission[]
  /// Whether the membership can be modified or not by non-admins
  locked                Boolean                @default(false)

  @@id([username, institutionId])
}

/// A kibana space
model Space {
  /// ID of the space (as used in Kibana)
  id            String            @id
  /// ID of the institution this space is associated to
  institutionId String
  /// The institution this space is associated to
  institution   Institution       @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// Creation date (in the DB, not in Kibana)
  createdAt     DateTime          @default(now())
  /// Latest update date (in the DB, not in Kibana)
  updatedAt     DateTime          @updatedAt
  /// Space name
  name          String
  /// Space description
  description   String?
  /// Space initials
  initials      String?
  /// Space color
  color         String?
  /// Space type (ezpaarse, counter5)
  type          String            @db.VarChar(50)
  /// A list of index patterns that should be available in the space
  indexPatterns Json[]
  /// Member permissions associated to this space
  permissions   SpacePermission[]
}

/// A space permission (access rights of a member for a specific space)
model SpacePermission {
  /// Username of the member
  username      String
  /// Institution of the member
  institutionId String
  /// The member
  membership    Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  /// ID of the space
  spaceId       String
  /// The space
  space         Space      @relation(fields: [spaceId], references: [id])
  /// Whether the member has a readonly access to the space
  readonly      Boolean    @default(false)
  /// Whether the permission can be modified or not
  locked        Boolean    @default(false)

  @@id([username, spaceId])
}

/// A repository (a section of elasticsearch allocated to an institution)
model Repository {
  /// The institution this repository is associated to
  institutions Institution[]
  /// Creation date
  createdAt    DateTime               @default(now())
  /// Latest update date
  updatedAt    DateTime               @updatedAt
  /// The index pattern (ex: b-bibcnrs*)
  pattern      String                 @id
  /// The repository type (ezpaarse, counter5)
  type         String                 @db.VarChar(50)
  /// Member permissions associated to this repository
  permissions  RepositoryPermission[]
}

/// A repository permission (access rights of a member for a specific repository)
model RepositoryPermission {
  /// Username of the member
  username          String
  /// Institution of the member
  institutionId     String
  /// The member
  membership        Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  /// Pattern of the repository
  repositoryPattern String
  /// The repository
  repository        Repository @relation(fields: [repositoryPattern], references: [pattern], onDelete: Cascade)
  /// Whether the member has a readonly access to the repository
  readonly          Boolean    @default(false)
  /// Whether the permission can be modified or not
  locked            Boolean    @default(false)

  @@id([username, institutionId, repositoryPattern])
}

/// Represent the actions that are triggered
model Action {
  /// ID of the action
  id            String       @id @default(cuid())
  // ID of the institution concerned by the action
  institutionId String?
  // The institution concerned by the action
  institution   Institution? @relation(fields: [institutionId], references: [id])
  /// ID of the user that triggered the action
  authorId      String?
  /// The user that triggered the action
  author        User?        @relation(fields: [authorId], references: [username])
  /// When the action occurred
  date          DateTime     @default(now())
  /// The action type (ex: commentInstitution, createSpace)
  type          String       @db.VarChar(50)
  /// Arbitrary data associated with the action (comment message, old/new state...)
  data          Json         @default("{}")
}

/// Represent a harvest session
model HarvestSession {
  /// ID of the session
  id                  String       @id @default(cuid())
  /// Beginning of the requested period
  beginDate           String
  /// End of the requested period
  endDate             String
  /// Query to get sushi credentials
  credentialsQuery    Json
  /// Jobs created after request
  jobs                HarvestJob[]
  /// IDs of the requested reports (ex: tr_j1)
  reportTypes         String[]
  /// Maximum execution time of a job
  timeout             Int          @default(600)
  /// Whether the reports should be fetched even if credentials aren't verified or wrong
  allowFaulty         Boolean      @default(false)
  /// Whether the reports should be downloaded even if not supported by the endpoint
  downloadUnsupported Boolean      @default(false)
  /// Whether the reports should be downloaded even if a local copy already exists
  forceDownload       Boolean      @default(false)
  /// Whether the reports should be inserted even if it does not pass the validation step
  ignoreValidation    Boolean?
  /// Parameters to pass to jobs
  params              Json?        @default("{}")
  /// Creation date
  createdAt           DateTime     @default(now())
  /// Latest update date
  updatedAt           DateTime     @updatedAt
}

/// Possible statuses of a harvest job
enum HarvestJobStatus {
  /// The job is waiting for processing
  waiting
  /// The job started processing
  running
  /// The job was delayed and scheduled for later processing
  delayed
  /// The job terminated successfuly
  finished
  /// The job failed
  failed
  /// The job was cancelled
  cancelled
  /// The job was interrupted (the API restarted while it was running)
  interrupted
}

/// Represent the execution of a harvest job
model HarvestJob {
  /// ID of the job
  id              String           @id @default(cuid())
  /// ID of the SUSHI credentials
  credentialsId   String
  /// SUSHI credentials used to harvest
  credentials     SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  /// Creation date
  createdAt       DateTime         @default(now())
  /// Latest update date
  updatedAt       DateTime         @updatedAt
  /// Start date (when the job moved from waiting to running)
  startedAt       DateTime?
  /// Job status
  status          HarvestJobStatus
  /// ID of the harvested report (ex: tr_j1)
  reportType      String
  /// ID of the harvest session
  sessionId       String
  /// Session that created the job
  session         HarvestSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  /// Index where the harvested data should be inserted
  index           String
  /// Job running time
  runningTime     Int?
  /// Job result
  result          Json?
  /// Error code, if a fatal exception was encountered
  errorCode       String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions Json[]
  /// Job logs
  logs            Log[]
  /// Job steps
  steps           Step[]
}

/// Harvest state of a SUSHI item, for a specific month and report ID
model Harvest {
  /// Date of the harvest
  harvestedAt     DateTime         @default(now())
  /// Identifier of the SUSHI credentials
  credentialsId   String
  /// SUSHI credentials
  credentials     SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  /// Report ID (TR, PR, DR...)
  reportId        String
  /// Report period (format: yyyy-MM)
  period          String
  /// Status of the harvest (waiting, running, finished, failed...)
  status          String
  /// Error code, if a fatal exception was encountered
  errorCode       String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions Json[]
  /// Number of report items that were successfuly inserted into Elasticsearch
  insertedItems   Int              @default(0)
  /// Number of report items that were updated in Elasticsearch
  updatedItems    Int              @default(0)
  /// Number of report items that failed to be inserted into Elasticsearch
  failedItems     Int              @default(0)

  @@id([credentialsId, reportId, period])
}

/// A job log
model Log {
  /// ID of the log
  id      String     @id @default(cuid())
  /// ID the job that produced the log
  jobId   String
  /// The job that produced the log
  job     HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  /// Date of the log
  date    DateTime   @default(now())
  /// Level of the log
  level   String     @db.VarChar(50)
  /// Message of the log
  message String
}

/// A job step
model Step {
  /// ID of the step
  id          String     @id @default(cuid())
  /// ID of the job that the step is part of
  jobId       String
  /// The job that the step is part of
  job         HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  /// Creation date
  createdAt   DateTime   @default(now())
  /// Latest update date
  updatedAt   DateTime   @updatedAt
  /// Start date
  startedAt   DateTime
  /// Step label
  label       String     @db.VarChar(50)
  /// Step status
  status      String     @db.VarChar(50)
  /// Running time
  runningTime Int
  /// Arbitrary data produced by the step
  data        Json
}

/// A SUSHI endpoint
model SushiEndpoint {
  /// ID of the endpoint
  id                        String             @id @default(cuid())
  /// Creation date
  createdAt                 DateTime           @default(now())
  /// Latest update date
  updatedAt                 DateTime           @updatedAt
  /// Base URL of the SUSHI service
  sushiUrl                  String
  /// Vendor name of the endpoint
  vendor                    String
  /// Abritrary tag list associated to the endpoint
  tags                      String[]
  /// Description of the endpoint
  description               String?
  /// Counter version of the SUSHI service
  counterVersion            String?
  /// Technical provider of the endpoint (ex: Atypon)
  technicalProvider         String?
  /// Whether the endpoint requires a customer ID
  requireCustomerId         Boolean            @default(false)
  /// Whether the endpoint requires a requestor ID
  requireRequestorId        Boolean            @default(false)
  /// Whether the endpoint requires an API key
  requireApiKey             Boolean            @default(false)
  /// Whether report validation errors should be ignored
  ignoreReportValidation    Boolean            @default(false)
  /// Date until which the endpoint is disabled (no harvest allowed)
  disabledUntil             DateTime?
  /// Default value for the customer_id parameter
  defaultCustomerId         String?
  /// Default value for the requestor_id parameter
  defaultRequestorId        String?
  /// Default value for the api_key parameter
  defaultApiKey             String?
  /// Separator used for multivaluated sushi params like Attributes_To_Show (defaults to "|")
  paramSeparator            String?
  /// List report IDs that are supported by the endpoint
  supportedReports          String[]
  /// Date on which the list of supported reports was last updated
  supportedReportsUpdatedAt DateTime?
  /// SUSHI credentials associated with the endpoint
  credentials               SushiCredentials[]
  /// Additionnal default parameters. Each param has a name, a value, and a scope.
  params                    Json[]
}

/// A set of SUSHI credentials, associated to a SUSHI endpoint
model SushiCredentials {
  /// ID of the SUSHI credentials
  id            String        @id @default(cuid())
  /// Creation date
  createdAt     DateTime      @default(now())
  /// Latest update date
  updatedAt     DateTime      @updatedAt
  /// ID of the institution that owns the credentials
  institutionId String
  /// ID of the SUSHI endpoint
  endpointId    String
  /// Value of the customer_id parameter
  customerId    String?
  /// Value of the requestor_id parameter
  requestorId   String?
  /// Value of the api_key parameter
  apiKey        String?
  /// Abritrary comment about the credentials
  comment       String?
  /// Abritrary tag list associated to the credentials
  tags          String[]
  /// Additionnal parameters. Each param has a name, a value, and a scope.
  params        Json[]
  /// Institution that owns the credentials
  institution   Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// The SUSHI endpoint
  endpoint      SushiEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  /// The harvest jobs associated to the credentials
  harvestJobs   HarvestJob[]
  /// The harvest states associated to the credentials
  harvests      Harvest[]
  /// Last connection test. Format: { date: DateTime, status: String, exceptions: Json[], errorCode: String? }
  connection    Json?
}
