// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("EZMESURE_POSTGRES_URL")
}

/// An institution
model Institution {
  /// ID of the institution
  id                  String                @id @default(cuid())
  /// ID of the parent institution
  parentInstitutionId String?
  /// The parent institution
  parentInstitution   Institution?          @relation("ParentInstitution", fields: [parentInstitutionId], references: [id])
  /// Creation date
  createdAt           DateTime              @default(now())
  /// Latest update date
  updatedAt           DateTime              @updatedAt
  /// Institution name
  name                String
  /// Institution namespace (ex: b-bibcnrs)
  namespace           String?
  /// Whether the institution has been validated or not
  validated           Boolean               @default(false)
  /// Whether the institution should appear in the partner list or not
  hidePartner         Boolean               @default(false)
  /// A list of tags associated to the institution
  tags                String[]
  /// ID of the institution logo
  logoId              String?
  /// Institution type (ex: university)
  type                String?
  /// Institution acronym
  acronym             String?
  /// Institution website URL
  websiteUrl          String?
  /// Institution city
  city                String?
  /// Institution UAI (Unité Administrative Immatriculée)
  uai                 String?
  /// Social links of the institution
  social              Json?
  /// Date when SUSHI credentials have been marked as ready for harvest
  sushiReadySince     DateTime?
  /// Institution members
  memberships         Membership[]
  /// Additional roles to give to each member
  elasticRoles        ElasticRole[]
  /// Institution spaces
  spaces              Space[]
  /// Actions that were triggered in the scope of the institution
  actions             Action[]
  /// Institution SUSHI credentials
  sushiCredentials    SushiCredentials[]
  /// Child institutions
  childInstitutions   Institution[]         @relation("ParentInstitution")
  /// Institution repositories
  repositories        Repository[]
  /// Institution aliases
  repositoryAliases   RepositoryAlias[]
  /// Custom properties
  customProps         InstitutionProperty[]
  /// API Keys related to institution
  apiKeys             ApiKey[]
}

model InstitutionProperty {
  /// ID of the custom field
  fieldId       String
  /// ID of the institution
  institutionId String
  /// The custom field
  field         CustomField @relation(fields: [fieldId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  /// The institution
  institution   Institution @relation(fields: [institutionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  /// Creation date
  createdAt     DateTime    @default(now())
  /// Latest update date
  updatedAt     DateTime    @updatedAt
  /// The value of the field for the institution
  value         Json?

  @@id([fieldId, institutionId])
}

model CustomField {
  /// ID of the field
  id                    String                @id
  /// Creation date
  createdAt             DateTime              @default(now())
  /// Latest update date
  updatedAt             DateTime              @updatedAt
  /// Whether the field should accept multiple values
  multiple              Boolean               @default(false)
  /// Whether the values of this field can be edited by regular users
  editable              Boolean               @default(false)
  /// Whether the field should be visible by regular users
  visible               Boolean               @default(false)
  /// Field label in French
  labelFr               String?
  /// Field label in English
  labelEn               String?
  /// Field description in French
  descriptionFr         String?
  /// Field description in English
  descriptionEn         String?
  /// URL (if any) to a page containing explanations about that field
  helpUrl               String?
  /// URL (if any) to the page dedicated to the institution (use {{id}} to insert the field value)
  itemUrl               String?
  /// Source to be used to autocomplete values (format: { index: String, field: String })
  autocomplete          Json?
  /// Institution properties that reference the field
  institutionProperties InstitutionProperty[]
}

/// A user
model User {
  /// The username
  username     String        @id
  /// Full name
  fullName     String
  /// Email
  email        String
  /// Creation date
  createdAt    DateTime      @default(now())
  /// Latest update date
  updatedAt    DateTime      @updatedAt
  /// Date of last activity
  lastActivity DateTime      @default(now())
  /// Whether the user has admin access or not
  isAdmin      Boolean       @default(false)
  /// Arbitrary metadata
  metadata     Json          @default("{}")
  /// User memberships
  memberships  Membership[]
  /// User additional roles specific to elastic
  elasticRoles ElasticRole[]
  /// Actions that were triggered by the user
  actions      Action[]
  /// API Keys created or related by user (cf. institution field of ApiKey)
  apiKeys      ApiKey[]
}

/// A membership (a user belonging to an institution)
model Membership {
  /// Username of the member
  username                   String
  /// The member
  user                       User                        @relation(fields: [username], references: [username], onDelete: Cascade)
  /// ID of the institution
  institutionId              String
  /// The institution
  institution                Institution                 @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// Roles of the member inside the institution
  roles                      String[]
  /// Permissions of the user for the institution (members management, SUSHI, ezREEPORT...)
  permissions                String[]
  /// Permissions of the user for the institution spaces
  spacePermissions           SpacePermission[]
  /// Permissions of the user for the institution repositories
  repositoryPermissions      RepositoryPermission[]
  /// Permissions of the user for the institution aliases
  repositoryAliasPermissions RepositoryAliasPermission[]
  /// Whether the membership can be modified or not by non-admins
  locked                     Boolean                     @default(false)
  /// Abritrary comment about the membership
  comment                    String?

  @@id([username, institutionId])
}

/// A kibana space
model Space {
  /// ID of the space (as used in Kibana)
  id                     String                       @id
  /// ID of the institution this space is associated to
  institutionId          String
  /// The institution this space is associated to
  institution            Institution                  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// Creation date (in the DB, not in Kibana)
  createdAt              DateTime                     @default(now())
  /// Latest update date (in the DB, not in Kibana)
  updatedAt              DateTime                     @updatedAt
  /// Space name
  name                   String
  /// Space description
  description            String?
  /// Space initials
  initials               String?
  /// Space color
  color                  String?
  /// Space type (ezpaarse, counter5)
  type                   String                       @db.VarChar(50)
  /// Space logo as a base64 data URL
  imageUrl               String?
  /// A list of index patterns that should be available in the space
  indexPatterns          Json[]
  /// The list of features that are turned off in the space
  disabledFeatures       String[]
  /// Member permissions associated to this space
  permissions            SpacePermission[]
  /// Permissions granted by role for this space
  elasticRolePermissions ElasticRoleSpacePermission[]
}

/// A space permission (access rights of a member for a specific space)
model SpacePermission {
  /// Username of the member
  username      String
  /// Institution of the member
  institutionId String
  /// The member
  membership    Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  /// ID of the space
  spaceId       String
  /// The space
  space         Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  /// Whether the member has a readonly access to the space
  readonly      Boolean    @default(false)
  /// Whether the permission can be modified or not
  locked        Boolean    @default(false)

  @@id([username, spaceId])
}

/// A repository (a section of elasticsearch allocated to an institution)
model Repository {
  /// The institution this repository is associated to
  institutions           Institution[]
  /// Creation date
  createdAt              DateTime                          @default(now())
  /// Latest update date
  updatedAt              DateTime                          @updatedAt
  /// The index pattern (ex: b-bibcnrs*)
  pattern                String                            @id
  /// The repository type (ezpaarse, counter5)
  type                   String                            @db.VarChar(50)
  /// Member permissions associated to this repository
  permissions            RepositoryPermission[]
  /// Aliases associated to this repository
  aliases                RepositoryAlias[]
  /// Permissions granted by role for this repository
  elasticRolePermissions ElasticRoleRepositoryPermission[]
  /// Alias templates that target this repository
  aliasTemplates         RepositoryAliasTemplate[]
  /// Harvest jobs using this repository
  harvestJobs            HarvestJob[]
  /// Permissions granted by api keys for this repository
  apiKeyPermissions      ApiKeyRepositoryPermission[]
}

/// A repository permission (access rights of a member for a specific repository)
model RepositoryPermission {
  /// Username of the member
  username          String
  /// Institution of the member
  institutionId     String
  /// The member
  membership        Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  /// Pattern of the repository
  repositoryPattern String
  /// The repository
  repository        Repository @relation(fields: [repositoryPattern], references: [pattern], onDelete: Cascade)
  /// Whether the member has a readonly access to the repository
  readonly          Boolean    @default(false)
  /// Whether the permission can be modified or not
  locked            Boolean    @default(false)

  @@id([username, institutionId, repositoryPattern])
}

/// A repository alias (alias for a section of elasticsearch)
model RepositoryAlias {
  /// ID of the template
  templateId             String?
  /// The template of the alias
  template               RepositoryAliasTemplate?               @relation(fields: [templateId], onUpdate: Cascade, onDelete: Cascade, references: [id])
  /// The institution this repository is associated to
  institutions           Institution[]
  /// Creation date
  createdAt              DateTime                               @default(now())
  /// Latest update date
  updatedAt              DateTime                               @updatedAt
  /// The alias pattern (ex: b-bibcnrs)
  pattern                String                                 @id
  /// The repository's pattern targeted by alias
  target                 String
  /// The repository
  repository             Repository                             @relation(fields: [target], references: [pattern], onDelete: Cascade)
  /// Filters linked to repository (format: [{ "field": "foo", "value": "bar" }])
  filters                Json?
  /// Member permissions associated to this alias
  permissions            RepositoryAliasPermission[]
  /// Permissions granted by role for this alias
  elasticRolePermissions ElasticRoleRepositoryAliasPermission[]
  /// Permissions granted by api keys for this alias
  apiKeyPermissions      ApiKeyRepositoryAliasPermission[]
}

/// A repository alias template (used to generate repository aliases)
model RepositoryAliasTemplate {
  /// ID
  id         String            @id
  /// Creation date
  createdAt  DateTime          @default(now())
  /// Latest update date
  updatedAt  DateTime          @updatedAt
  /// The alias pattern (ex: x-alias-istex-{id}-ezpaarse)
  pattern    String
  /// The repository's pattern targeted by alias
  target     String
  /// Whether the template is active or not
  active     Boolean           @default(true)
  /// The repository
  repository Repository        @relation(fields: [target], references: [pattern], onDelete: Cascade)
  /// Filters linked to repository (format: [{ "field": "foo", "value": "bar" }])
  filters    Json[]
  /// Conditions for creating a new alias (format: [{ "field": "foo", "value": "bar" }])
  conditions Json[]
  /// The aliases that were generated with this template
  aliases    RepositoryAlias[]
}

/// A alias permission (access rights of a member for a specific alias)
model RepositoryAliasPermission {
  /// Username of the member
  username      String
  /// Institution of the member
  institutionId String
  /// The member
  membership    Membership      @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  /// Pattern of the alias
  aliasPattern  String
  /// The alias
  alias         RepositoryAlias @relation(fields: [aliasPattern], references: [pattern], onDelete: Cascade)
  /// Whether the permission can be modified or not
  locked        Boolean         @default(false)

  @@id([username, institutionId, aliasPattern])
}

/// Custom role to give to users
model ElasticRole {
  /// Name of the role
  name                       String                                 @id
  /// Users using this roles
  users                      User[]
  /// Institutions using this roles
  institutions               Institution[]
  /// Creation date
  createdAt                  DateTime                               @default(now())
  /// Latest update date
  updatedAt                  DateTime                               @updatedAt
  /// A list of conditions used to populate the institutions
  conditions                 Json[]
  /// Permissions that role give to repositories
  repositoryPermissions      ElasticRoleRepositoryPermission[]
  /// Permissions that role gives to repository aliases
  repositoryAliasPermissions ElasticRoleRepositoryAliasPermission[]
  /// Permissions that role gives to spaces
  spacePermissions           ElasticRoleSpacePermission[]
}

/// Permission on repository granted by a role
model ElasticRoleRepositoryPermission {
  /// Name of the concerned role
  elasticRoleName   String
  /// The concerned role
  elasticRole       ElasticRole @relation(fields: [elasticRoleName], references: [name], onDelete: Cascade)
  /// Pattern of the concerned repository
  repositoryPattern String
  /// The concerned repository
  repository        Repository  @relation(fields: [repositoryPattern], references: [pattern], onDelete: Cascade)
  /// Whether the member has a readonly access to the repository
  readonly          Boolean     @default(false)

  @@id([elasticRoleName, repositoryPattern])
}

/// Permission on repository alias granted by a role
model ElasticRoleRepositoryAliasPermission {
  /// Name of the concerned role
  elasticRoleName String
  /// The concerned role
  elasticRole     ElasticRole     @relation(fields: [elasticRoleName], references: [name], onDelete: Cascade)
  /// Pattern of the concerned alias
  aliasPattern    String
  /// The concerned alias
  alias           RepositoryAlias @relation(fields: [aliasPattern], references: [pattern], onDelete: Cascade)

  @@id([elasticRoleName, aliasPattern])
}

/// Permission on space granted by a role
model ElasticRoleSpacePermission {
  /// Name of the concerned role
  elasticRoleName String
  /// The concerned role
  elasticRole     ElasticRole @relation(fields: [elasticRoleName], references: [name], onDelete: Cascade)
  /// Id of the concerned space
  spaceId         String
  /// The concerned space
  space           Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  /// Whether the member has a readonly access to the space
  readonly        Boolean     @default(false)

  @@id([elasticRoleName, spaceId])
}

/// Represent the actions that are triggered
model Action {
  /// ID of the action
  id            String       @id @default(cuid())
  // ID of the institution concerned by the action
  institutionId String?
  // The institution concerned by the action
  institution   Institution? @relation(fields: [institutionId], references: [id])
  /// ID of the user that triggered the action
  authorId      String?
  /// The user that triggered the action
  author        User?        @relation(fields: [authorId], references: [username])
  /// When the action occurred
  date          DateTime     @default(now())
  /// The action type (ex: commentInstitution, createSpace)
  type          String       @db.VarChar(50)
  /// Arbitrary data associated with the action (comment message, old/new state...)
  data          Json         @default("{}")
}

/// Possible statuses of an harvest session
enum HarvestSessionStatus {
  /// The session is prepared, ready to be started
  prepared
  /// The session is starting, preparing things before launching jobs
  starting
  /// The session is running, it launched jobs and wait for them to finish
  running
  /// The session terminated
  finished
  /// The session is stopping
  stopping
  /// The session was forcefully stopped
  stopped
}

/// Represent a harvest session
model HarvestSession {
  /// ID of the session
  id                     String               @id @default(cuid())
  /// Beginning of the requested period
  beginDate              String
  /// End of the requested period
  endDate                String
  /// Query to get sushi credentials
  credentialsQuery       Json
  /// Jobs created after request
  jobs                   HarvestJob[]
  /// IDs of the requested reports (ex: tr_j1)
  reportTypes            String[]
  /// Allowed COUNTER versions (ex: ['5.1', '5'])
  allowedCounterVersions String[]
  /// Maximum execution time of a job
  timeout                Int                  @default(600)
  /// Whether the reports should be fetched even if credentials aren't verified or wrong
  allowFaulty            Boolean              @default(false)
  /// Whether the reports should be downloaded even if not supported by the endpoint
  downloadUnsupported    Boolean              @default(false)
  /// Whether the reports should be downloaded even if a local copy already exists
  forceDownload          Boolean              @default(false)
  /// Whether a mail should be sent when session ended
  sendEndMail            Boolean              @default(true)
  /// Whether the reports should be inserted even if it does not pass the validation step
  ignoreValidation       Boolean?
  /// Parameters to pass to jobs
  params                 Json?                @default("{}")
  /// Status of session
  status                 HarvestSessionStatus @default(prepared)
  /// Start date
  startedAt              DateTime?
  /// Deletion date
  deletedAt              DateTime?
  /// Creation date (the first time is got prepared)
  createdAt              DateTime             @default(now())
  /// Latest update date
  updatedAt              DateTime             @updatedAt
}

/// Possible statuses of a harvest job
enum HarvestJobStatus {
  /// The job is waiting for processing
  waiting
  /// The job started processing
  running
  /// The job was delayed and scheduled for later processing
  delayed
  /// The job terminated successfuly
  finished
  /// The job failed
  failed
  /// The job was cancelled
  cancelled
  /// The job was interrupted (the API restarted while it was running)
  interrupted
}

/// Represent the execution of a harvest job
model HarvestJob {
  /// ID of the job
  id                String           @id @default(cuid())
  /// ID of the SUSHI credentials
  credentialsId     String
  /// SUSHI credentials used to harvest
  credentials       SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  /// Creation date
  createdAt         DateTime         @default(now())
  /// Latest update date
  updatedAt         DateTime         @updatedAt
  /// Start date (when the job moved from waiting to running)
  startedAt         DateTime?
  /// Job status
  status            HarvestJobStatus
  /// ID of the harvested report (ex: tr_j1)
  reportType        String
  /// Version of COUNTER to harvest (ex: 5.1)
  counterVersion    String
  /// ID of the harvest session
  sessionId         String
  /// Session that created the job
  session           HarvestSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  /// Beginning of the requested period, may differ from session's cause of supported periods
  beginDate         String
  /// End of the requested period, may differ from session's cause of supported periods
  endDate           String
  /// Index where the harvested data should be inserted
  index             String
  /// Repository pattern including the index
  repositoryPattern String?
  /// Repository including the index
  repository        Repository?      @relation(fields: [repositoryPattern], references: [pattern], onDelete: SetNull)
  /// Job running time
  runningTime       Int?
  /// Job result
  result            Json?
  /// Error code, if a fatal exception was encountered
  errorCode         String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions   Json[]
  /// Job logs
  logs              Log[]
  /// Job steps
  steps             Step[]
  /// States affected by current job
  harvests          Harvest[]
}

/// Harvest state of a SUSHI item, for a specific month and report ID
model Harvest {
  /// Date of the harvest
  harvestedAt     DateTime         @default(now())
  /// Id of the job that harvested current state
  harvestedById   String?
  /// Identifier of the SUSHI credentials
  credentialsId   String
  /// SUSHI credentials
  credentials     SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  /// Report ID (TR, PR, DR...)
  reportId        String
  /// Report period (format: yyyy-MM)
  period          String
  /// Status of the harvest (waiting, running, finished, failed...)
  status          String
  /// Error code, if a fatal exception was encountered
  errorCode       String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions Json[]
  /// Number of report items that were successfuly inserted into Elasticsearch
  insertedItems   Int              @default(0)
  /// Number of report items that were updated in Elasticsearch
  updatedItems    Int              @default(0)
  /// Number of report items that failed to be inserted into Elasticsearch
  failedItems     Int              @default(0)

  /// Job that harvested current state
  harvestedBy HarvestJob? @relation(fields: [harvestedById], references: [id])

  @@id([credentialsId, reportId, period])
}

/// A job log
model Log {
  /// ID of the log
  id      String     @id @default(cuid())
  /// ID the job that produced the log
  jobId   String
  /// The job that produced the log
  job     HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  /// Date of the log
  date    DateTime   @default(now())
  /// Level of the log
  level   String     @db.VarChar(50)
  /// Message of the log
  message String
}

/// A job step
model Step {
  /// ID of the step
  id          String     @id @default(cuid())
  /// ID of the job that the step is part of
  jobId       String
  /// The job that the step is part of
  job         HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  /// Creation date
  createdAt   DateTime   @default(now())
  /// Latest update date
  updatedAt   DateTime   @updatedAt
  /// Start date
  startedAt   DateTime
  /// Step label
  label       String     @db.VarChar(50)
  /// Step status
  status      String     @db.VarChar(50)
  /// Running time
  runningTime Int
  /// Arbitrary data produced by the step
  data        Json
}

/// A SUSHI endpoint
model SushiEndpoint {
  /// ID of the endpoint
  id                          String             @id @default(cuid())
  /// Creation date
  createdAt                   DateTime           @default(now())
  /// Latest update date
  updatedAt                   DateTime           @updatedAt
  /// Base URL of the SUSHI service
  sushiUrl                    String
  /// Vendor name of the endpoint
  vendor                      String
  /// Abritrary tag list associated to the endpoint
  tags                        String[]
  /// Description of the endpoint
  description                 String?
  /// Counter versions of the SUSHI service
  counterVersions             String[]           @default(["5"])
  /// Minimum period where a COUNTER version can be used. If not provided, version can be used for every period. Format: { [version: string]: string }
  counterVersionsAvailability Json               @default("{}")
  /// Technical provider of the endpoint (ex: Atypon)
  technicalProvider           String?
  /// Whether the endpoint is active and can be harvested
  active                      Boolean            @default(true)
  /// Date on which the active status was last modified
  activeUpdatedAt             DateTime           @default(now())
  /// Whether the endpoint requires a customer ID
  requireCustomerId           Boolean            @default(false)
  /// Whether the endpoint requires a requestor ID
  requireRequestorId          Boolean            @default(false)
  /// Whether the endpoint requires an API key
  requireApiKey               Boolean            @default(false)
  /// Whether report validation errors should be ignored
  ignoreReportValidation      Boolean            @default(false)
  /// Date until which the endpoint is disabled (no harvest allowed)
  disabledUntil               DateTime?
  /// Default value for the customer_id parameter
  defaultCustomerId           String?
  /// Default value for the requestor_id parameter
  defaultRequestorId          String?
  /// Default value for the api_key parameter
  defaultApiKey               String?
  /// Separator used for multivaluated sushi params like Attributes_To_Show (defaults to "|")
  paramSeparator              String?
  /// [Deprecated] List report IDs that are supported by the endpoint
  supportedReports            String[]
  /// [Deprecated] List of report IDs that should be ignored, even if the endpoint indicates that they are supported
  ignoredReports              String[]
  /// [Deprecated] Additional report IDs to be added to the list of supported reports provided by the endpoint
  additionalReports           String[]
  /// [Deprecated] Date on which the list of supported reports was last updated
  supportedReportsUpdatedAt   DateTime?
  /// List of reports that are supported (or unsupported) by the endpoint, with periods available
  supportedData               Json               @default("{}")
  /// Date on which the list of supported data was last updated
  supportedDataUpdatedAt      DateTime?
  /// Date format to use for the begin_date and end_date parameters (defaults to "yyyy-MM")
  harvestDateFormat           String?
  /// Report used when testing endpoint
  testedReport                String?
  /// Id of platform in https://registry.countermetrics.org
  registryId                  String?
  /// SUSHI credentials associated with the endpoint
  credentials                 SushiCredentials[]
  /// Additionnal default parameters. Each param has a name, a value, and a scope.
  params                      Json[]
}

/// A set of SUSHI credentials, associated to a SUSHI endpoint
model SushiCredentials {
  /// ID of the SUSHI credentials
  id                String                        @id @default(cuid())
  /// Creation date
  createdAt         DateTime                      @default(now())
  /// Latest update date
  updatedAt         DateTime                      @updatedAt
  /// When item was marked for deletion
  deletedAt         DateTime?
  /// ID of the institution that owns the credentials
  institutionId     String
  /// ID of the SUSHI endpoint
  endpointId        String
  /// ID of the deletion task
  deletionTaskId    String?
  /// Value of the customer_id parameter
  customerId        String?
  /// Value of the requestor_id parameter
  requestorId       String?
  /// Value of the api_key parameter
  apiKey            String?
  /// Abritrary comment about the credentials
  comment           String?
  /// Whether the credentials are active and can be harvested
  active            Boolean                       @default(true)
  /// Date on which the active status was last modified
  activeUpdatedAt   DateTime                      @default(now())
  /// Whether the credentials are archived
  archived          Boolean                       @default(false)
  /// Date on which the archived status was last modified
  archivedUpdatedAt DateTime                      @default(now())
  /// Packages (profiles, accounts, funds...) that include the credentials
  packages          String[]
  /// Abritrary tag list associated to the credentials
  tags              String[]
  /// Additionnal parameters. Each param has a name, a value, and a scope.
  params            Json[]
  /// Institution that owns the credentials
  institution       Institution                   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  /// The SUSHI endpoint
  endpoint          SushiEndpoint                 @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  /// The harvest jobs associated to the credentials
  harvestJobs       HarvestJob[]
  /// The harvest states associated to the credentials
  harvests          Harvest[]
  /// The deletion task associated to the credentials
  deletionTask      SushiCredentialsDeletionTask? @relation(fields: [deletionTaskId], references: [id], onDelete: Cascade)
  /// Last connection test. Format: { date: DateTime, status: String, exceptions: Json[], errorCode: String? }
  connection        Json?
}

model SushiCredentialsDeletionTask {
  /// ID of the Elastic task
  id           String             @id
  /// Progress of the task
  progress     Int                @default(0)
  /// Index pattern related to the task
  indexPattern String
  /// Is the task canceled
  canceled     Boolean            @default(false)
  /// Error encountered with the task
  error        String?
  /// Creation date
  createdAt    DateTime           @default(now())
  /// Latest update date
  updatedAt    DateTime           @updatedAt
  /// Credentials related to task
  credentials  SushiCredentials[]
}

enum SushiAlertType {
  HARVESTED_BUT_UNSUPPORTED
  ENDPOINT
}

model SushiAlert {
  /// ID of the alert
  id        String         @id @default(cuid())
  /// Type of the alert
  type      SushiAlertType
  /// Severity of the alert (info, warn, error, etc.)
  severity  String
  /// Context about alert
  context   Json           @default("{}")
  /// Creation date
  createdAt DateTime       @default(now())
}

// An API Key to authenticate users or institutions
model ApiKey {
  /// ID of the key
  id                         String                            @id @default(cuid())
  /// Value of the key, shouldn't be published and should be a hash of the actual value
  value                      String                            @unique
  /// Institution id related to the key. If no institution are related, ApiKey is related to user
  institutionId              String?
  /// Institution related to the key. If no institution are related, ApiKey is related to user
  institution                Institution?                      @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  // User related to the key. If institution is related, this field represents the creator
  username                   String?
  // User related to the key. If institution is related, this field represents the creator
  user                       User?                             @relation(fields: [username], references: [username])
  /// Name of the key
  name                       String
  /// Description of the key
  description                String                            @default("")
  /// Permissions of the key (members management, SUSHI, ezREEPORT...)
  permissions                String[]
  /// Permissions of the user for the institution repositories
  repositoryPermissions      ApiKeyRepositoryPermission[]
  /// Permissions of the user for the institution aliases
  repositoryAliasPermissions ApiKeyRepositoryAliasPermission[]
  /// Whether the key is active
  active                     Boolean                           @default(true)
  /// Date on which the active status was last modified
  activeUpdatedAt            DateTime                          @default(now())
  /// Creation date
  createdAt                  DateTime                          @default(now())
  /// Latest update date
  updatedAt                  DateTime                          @updatedAt
  /// Expiration date
  expiresAt                  DateTime?
  /// Date of last activity
  lastActivity               DateTime                          @default(now())

  @@index([value])
}

/// A repository permission for an ApiKey
model ApiKeyRepositoryPermission {
  /// ID of the key
  apiKeyId   String
  /// The related ApiKey
  apiKey     ApiKey     @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  /// Pattern of the repository
  pattern    String
  /// The repository
  repository Repository @relation(fields: [pattern], references: [pattern], onDelete: Cascade)
  /// Whether the api key has a readonly access to the repository
  readonly   Boolean    @default(false)

  @@id([apiKeyId, pattern])
}

/// A alias permission for an ApiKey
model ApiKeyRepositoryAliasPermission {
  /// ID of the key
  apiKeyId     String
  /// The related ApiKey
  apiKey       ApiKey          @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  // Pattern of the alias
  aliasPattern String
  /// The alias
  alias        RepositoryAlias @relation(fields: [aliasPattern], references: [pattern], onDelete: Cascade)

  @@id([apiKeyId, aliasPattern])
}
