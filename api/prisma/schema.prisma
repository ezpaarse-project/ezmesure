// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("EZMESURE_POSTGRES_URL")
}

model Institution {
  id                  String             @id @default(cuid())
  parentInstitutionId String?
  parentInstitution   Institution?       @relation("ParentInstitution", fields: [parentInstitutionId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  name                String
  namespace           String?
  validated           Boolean            @default(false)
  hidePartner         Boolean            @default(false)
  tags                String[]
  logoId              String?
  type                String?
  acronym             String?
  websiteUrl          String?
  city                String?
  uai                 String?
  social              Json?
  auto                Json?
  sushiReadySince     DateTime?
  memberships         Membership[]
  spaces              Space[]
  historyEntries      HistoryEntry[]
  sushiCredentials    SushiCredentials[]
  childInstitutions   Institution[]      @relation("ParentInstitution")
  repositories        Repository[]
}

model User {
  username       String         @id
  fullName       String
  email          String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isAdmin        Boolean        @default(false)
  metadata       Json           @default("{}")
  memberships    Membership[]
  historyEntries HistoryEntry[]
}

model Membership {
  username              String
  user                  User                   @relation(fields: [username], references: [username], onDelete: Cascade)
  institutionId         String
  institution           Institution            @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  roles                 String[]
  permissions           String[]
  spacePermissions      SpacePermission[]
  repositoryPermissions RepositoryPermission[]
  locked                Boolean                @default(false)

  @@id([username, institutionId])
}

model Space {
  id            String            @id
  institutionId String?
  institution   Institution?      @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String
  description   String?
  initials      String?
  color         String?
  type          String            @db.VarChar(50)
  indexPatterns Json[]
  permissions   SpacePermission[]
}

model SpacePermission {
  username      String
  institutionId String
  membership    Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  spaceId       String
  space         Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  readonly      Boolean    @default(false)
  locked        Boolean    @default(false)

  @@id([username, spaceId])
}

model Repository {
  id            String                 @id @default(cuid())
  institutionId String?
  institution   Institution?           @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  pattern       String
  type          String                 @db.VarChar(50)
  permissions   RepositoryPermission[]

  @@unique([institutionId, pattern])
}

model RepositoryPermission {
  username      String
  institutionId String
  membership    Membership @relation(fields: [username, institutionId], references: [username, institutionId], onDelete: Cascade)
  repositoryId  String
  repository    Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  readonly      Boolean    @default(false)
  locked        Boolean    @default(false)

  @@id([username, repositoryId])
}

model HistoryEntry {
  id            String      @id @default(cuid())
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  authorId      String
  author        User        @relation(fields: [authorId], references: [username])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  type          String      @db.VarChar(50)
  message       String?
  data          Json
}

model HarvestJob {
  id               String           @id @default(cuid())
  credentialsId    String
  credentials      SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  startedAt        DateTime?
  beginDate        String
  endDate          String
  status           String
  reportType       String
  harvestId        String
  index            String
  runningTime      Int?
  timeout          Int
  forceDownload    Boolean          @default(false)
  ignoreValidation Boolean          @default(false)
  params           Json?            @default("{}")
  result           Json?
  /// Error code, if a fatal exception was encountered
  errorCode        String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions  Json[]
  logs             Log[]
  steps            Step[]
}

model Harvest {
  /// Date of the harvest
  harvestedAt     DateTime         @default(now())
  /// Identifier of the SUSHI credentials
  credentialsId   String
  /// SUSHI credentials
  credentials     SushiCredentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  /// Report ID (TR, PR, DR...)
  reportId        String
  /// Report period (format: yyyy-MM)
  period          String
  /// Status of the harvest (waiting, running, finished, failed...)
  status          String
  /// Error code, if a fatal exception was encountered
  errorCode       String?
  /// SUSHI exceptions returned by the endpoint (format: { code: string, severity: string, message: string })
  sushiExceptions Json[]
  /// Number of report items that were successfuly inserted into Elasticsearch
  insertedItems   Int              @default(0)
  /// Number of report items that were updated in Elasticsearch
  updatedItems    Int              @default(0)
  /// Number of report items that failed to be inserted into Elasticsearch
  failedItems     Int              @default(0)

  @@id([credentialsId, reportId, period])
}

model Log {
  id      String     @id @default(cuid())
  jobId   String
  job     HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  date    DateTime   @default(now())
  level   String     @db.VarChar(50)
  message String
}

model Step {
  id          String     @id @default(cuid())
  jobId       String
  job         HarvestJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  startedAt   DateTime
  label       String     @db.VarChar(50)
  status      String     @db.VarChar(50)
  runningTime Int
  data        Json
}

model SushiEndpoint {
  id                     String             @id @default(cuid())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  sushiUrl               String
  vendor                 String
  tags                   String[]
  description            String?
  counterVersion         String?
  technicalProvider      String?
  requireCustomerId      Boolean            @default(false)
  requireRequestorId     Boolean            @default(false)
  requireApiKey          Boolean            @default(false)
  ignoreReportValidation Boolean            @default(false)
  defaultCustomerId      String?
  defaultRequestorId     String?
  defaultApiKey          String?
  paramSeparator         String?
  supportedReports       String[]
  credentials            SushiCredentials[]
  params                 Json[]
}

model SushiCredentials {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  institutionId String
  endpointId    String
  customerId    String?
  requestorId   String?
  apiKey        String?
  comment       String?
  tags          String[]
  params        Json[]
  institution   Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  endpoint      SushiEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  harvestJobs   HarvestJob[]
  harvests      Harvest[]
}
